# Citation Style Language 1.0 - What's New? #

*Document details*<br />
**Authors**: Frank Bennett, Bruce D'Arcus, Rintze Zelle<br />
**Version**: 2009-xx-xx<br />
**Available Online**:
https://sourceforge.net/apps/trac/xbiblio/browser/csl/doc/specification.mdml (TODO: link to HTML version, or just to CSL project page)

Version 1.0 of the [Citation Style Language][csl-home] (CSL) comes not only with
many new features, but also with updated documentation. There are now three
primary sources: a) the [schema][csl-schema] itself, which, although the most
exact, may require some understanding of [Relax NG Compact][relaxng], the XML
schema language in which the CSL schema is written, b) the complete
[specification][csl-spec], which aims to describe all the parts of CSL 1.0, and
c) this document, in which many of the recently added features are highlighted,
so that existing CSL style authors can easily update their knowledge.

**Nota Bene**
There are two details of how CSL styles in this document are described that
deserve some attention. The first is that the included CSL style examples are
often not valid CSL. Instead, the use of XML is kept to a minimum in
demonstrating the use of each feature. Secondly, when the XML elements of CSL are
mentioned, the CSL namespace ("cs") is always attached as a prefix (e.g.
`cs:citation` for the citation element). However, CSL styles will generally
define the default CSL namespace in the root `cs:style` element
(xmlns="http://purl.org/net/xbiblio/csl"), in which case it is not necessary to include the
namespace prefix for each XML element.

[csl-home]: http://www.citationstyles.org/
[csl-spec]: http://www.citationstyles.org/ (TODO: update link)
[csl-schema]:
http://sourceforge.net/apps/trac/xbiblio/browser/csl/schema/tags/0.8/csl.html?rev=1084 (TODO: link to final HTML version with syntax highlighting)
[relaxng]: http://www.relaxng.org/

## Upgrading Pre-1.0 Styles ##

A number of backward incompatible changes have been made to CSL to streamline
its design and to accommodate new features. To allow you to continue to use
existing CSL styles, an [XSLT stylesheet][xslt-stylesheet] has been written to
automate the conversion of Pre-1.0 CSL styles to the new CSL 1.0 format. All the
styles in the Zotero Style Repository will be (or may already have been) (TODO:
this might require some updating) automatically converted (TODO: I assume that
the Zotero team will update the repository, and perform a local conversion in
the Zotero client for installed styles that do not originate from the style
repository). If you however use CSL styles that are not hosted at the Zotero
Style Repository, you can perform the conversion yourself using either
command-line tools like [Saxon][saxon] and [xsltproc][xsltproc], or one of the
(often more user-friendly) online XSLT-tools, such as the one offered by
[www.shell-tools.net][shelltools-xslt]. For this particular tool, the upgrade
instructions are:

 1. Paste the contents of the [XSLT stylesheet][xslt-stylesheet] into the "xslt"
 text box at [http://www.shell-tools.net/index.php?op=xslt][shelltools-xslt]
 2. Paste the contents of your CSL style into the "xml" text box
 3. Click the "Submit Query"-button
 4. Copy the text from the "output" text box to a text editor (e.g. Notepad on
 Windows) and save the file with a .csl-extension.
 
 It is highly recommended to always validate converted styles against the [CSL
 1.0 schema][csl-schema] to make sure valid CSL styles have been obtained.

[xslt-stylesheet]: https://sourceforge.net/apps/trac/xbiblio/browser/csl/scripts/update.xsl
[saxon]: http://saxon.sourceforge.net/
[xsltproc]: http://xmlsoft.org/XSLT/xsltproc2.html
[shelltools-xslt]: http://www.shell-tools.net/index.php?op=xslt

## Validation ##

Writing styles means validating. However, a few changes have been made to the
schema that might have affect your validation process.

### Split Schema ###

One of the more striking changes is that the schema is now split into multiple
files: csl.rnc (containing most of the schema logic, this file calls the
other schema parts), csl-variables.rnc, csl-terms.rnc and csl-types.rnc. To
validate against the CSL schema, make sure all these files are located in the
same directory, and validate against csl.rnc.

### Schematron ###

In addition to Relax NG code, the schema also contains two new Schematron rules
to check for `cs:text` and `cs:key` elements that call undeclared `cs:macro`
elements. Note that not all validators support embedded Schematron code (e.g.
[Jing][jing] ignores the Schematron rules in Relax NG Compact files).

[jing]: http://www.thaiopensource.com/relaxng/jing.html

### CSL Schema Formats: .rnc and .rng ###

The schema of CSL 1.0 has been developed in the compact syntax of Relax NG
(schema files written in this syntax have the ".rnc" extension). As not all XML
validators support the compact syntax, we now also provide the XML version of
the schema (these are the files with the ".rng" extension).

### Validating Locale Files ###

CSL ships with localized terms, dates and options, which are contained in the
"locales-xx-XX.xml" files (the "xx-XX" indicating the locale). With the CSL 1.0
schema, it is now also possible to validate these locale files, which is
especially useful if you wish to customize these files (although in most cases,
in view of portability, you'd probably want to override locale data in the CSL
style and not in the locale files).

### Style Structure ###

#### Version Number ####

To facilitate future development of CSL, valid 1.0 styles now should specify the
CSL version in which the style was written. For example:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.xml}
<style version="1.0" class="in-text">
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#### Options ####

Before CSL 1.0, options were set using the `cs:option` element. As it was
recognized that this was non-standard use of XML, options in CSL 1.0 are set via
attributes instead. Global options (affecting both the `citation` and
`bibliography` output) are set as attributes in the `cs:style` element,
citation-specific options in the `cs:citation` element, and
bibliography-specific options in the `cs:bibliography` element. Localized
options are treated slightly differently (see the section on Localization).

## Style Metadata ##

### Licensing ###

(TODO: are we settling on license URIs?)

### ISSN and ISSN-L ###

Identifying journals by their titles is not always straightforward. Special
characters, spelling mistakes or multiple journals sharing the same name can
sometimes pose problems. Because of this, it is a good idea to include ISSN-data
in journal-specific styles when available. This unambiguously identifies the
journal for which the style was written. It would also enable CSL style
repositories to allow users to look up journal styles by means of the ISSN. In
CSL 1.0, multiple `cs:issn` elements are allowed, so that the ISSNs of both the
print and online versions of a journal can be included. The info-section of the
style may also contain a `cs:issnl` element, which has been added for the new
ISSN-L standard (unlike ISSNs, all media types of a certain journals share the
same ISSN-L, see also http://www.issn.org/2-22637-What-is-an-ISSN-L.php). For
example:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.xml}
<style>
  <info>
    <issn>1234-1234</issn>
    <issn>4567-4567</issn>
    <issnl>8521-8521</issnl>
  </info>
</style>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

## Localization ##

The "locales-xx-XX.xml" files (with "xx-XX" indicating the locale, e.g. "en-US")
that ship with the CSL schema previously had only the role of supplying
localized terms (translations are kindly prepared by the [Babelzilla translation
effort](http://www.babelzilla.org/)). With CSL 1.0, these locale files also
contain localized options and localized date formats. Because of this, some
changes have been made to the XML format of these files: `cs:locale` has
replaced `terms` as the root element, both the `xml:lang` and `xmlns` attributes
are applied to the `cs:locales` element, and new elements have been introduced
to localize dates and options (`cs:date` and `cs:style-options`). An example of
the new locale file format can be found [here][locales-en-EN.xml]. As before,
any content of the "locales-xx-XX.xml" files can be overridden in the style
itself (using the `xml:lang` attribute on `cs:locale` to select the correct
locale to override), e.g.:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.xml}
<style>
  <locale xml:lang="en">
    <style-options punctuation-in-quote="true" />
    <terms>
      <term name="et-al">et al</term>
    </terms>
    <date form="text">
      <date-part name="month" suffix=" " form="short"/>
      <date-part name="day" suffix=", "/>
      <date-part name="year"/>
    </date>
  </locale>
</style>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[locales-en-EN.xml]: http://bitbucket.org/fbennett/citeproc-js/src/tip/locale/locales-en-US.xml

### Localized Terms ###

A number of terms have been added to CSL 1.0. Most notably, the locales files
now contain terms for inner ("open-inner-quote" and "close-inner-quote", e.g. ‘
and ’) and outer quotes ("open-quote" and "close-quote", e.g. “ and ”). This
enables CSL to localize quotes that are specified by the `quotes` attribute, and
to show correct nesting behavior (using alternating quote sets).

### Localized Dates ###

CSL 1.0 offers support for date localization. This feature is entirely optional:
dates can still be defined in the old (non-localized) format. To use a localized
date, use `cs:date` with the `form` attribute set to either `text` (resulting in
a date like 'April 21, 2008') or `numeric` ('4/21/08'). Punctuation and the
order of date-parts are specified in the "locales-xx-XX.xml" files, so correct
dates are produced for each locale. As demonstrated in the example below, it is
not necessary to specify any `cs:date-part` elements for localized dates:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.xml}
<style>
  <bibliography>
    <!-- old-fashioned, unlocalized date -->
    <layout>
      <date variable="accessed">
        <date-part name="year"/>
        <date-part name="month" form="numeric" prefix="-"/>
        <date-part name="day" prefix="-"/>
      </date>
    </layout>
    <!-- default localized date -->
    <layout>
      <date form="numeric"/>
    </layout>
  </bibliography>
</style>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.xml}

The `form` attribute of `cs:date` is limited to only two values, but there are a
number of ways to further customize localized dates. First, it is possible to
limit the number of date-parts shown with the optional `cs:date-parts` attribute
of `cs:date`: possible values are `year-month-day` (default), `year-month` and
`year`. Secondly, it is possible to define one or more `cs:date-part` elements.
Defining these elements has no effect on the order of the date-parts, which is
specified in the "locales-xx-XX.xml" files. Neither do they control which
date-parts are shown. Instead, they allow you to override specific properties of
the localized dates. For instance, you can set the `form` of the month-date-part
`short` for all locales. Finally, it is also possible to change date formats per
locale in `cs:locale`-section of the style. Note that here it is not allowed to
apply affixes (prefixes and suffixes) to `cs:date` (the same holds for the date
definitions in the "locales-xx-XX.xml" files). All punctuation should be applied
to the different `cs:date-part` elements. This separates locale unspecific
affixes (e.g. parentheses around the date, as in "(2000)") from locale-specific
punctuation, a requirement for robust date localization. Examples:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.xml}
<style>
  <!-- a changed date format for the English locale -->
  <locale xml:lang="en">
    <date form="text">
      <date-part name="month" suffix=" " form="short"/>
      <date-part name="day" suffix=", "/>
      <date-part name="year"/>
    </date>
  </locale>
  <bibliography>
    <layout>
      <!-- date limited to showing the year and month -->
      <date form="text" date-parts="year-month"/>
      <!-- numeric date with customized form (leading zeros) and prefixes -->
      <date form="numeric">
        <date-part name="month" form="numeric-leading-zeros" prefix="/"/>
        <date-part name="day" form="numeric-leading-zeros" prefix="/"/>
      </date>
    </layout>
  </bibliography>
</style>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

### Localized Options ###

In addition to localized dates and terms, CSL 1.0 now also supports localized
options (even though there is, for now, only one such an option,
`punctuation-in-quote`). The default value of localized options is set for each
locale in the "locales-xx-XX.xml" files, but these values can be overridden in
the locale section of the CSL style. For this the `cs:style-options` element is
used, since `punctuation-in-quote` is a global option, affecting both the
citation and bibliography. An example:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.xml}
<style>
  <locale xml:lang="en">
    <style-options punctuation-in-quote="true">
  </locale>
</style>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#### Punctuation around Quotes ####

The option `punctuation-in-quote` is used to specify whether punctuation (commas
and periods) should appear within ("true", e.g. for American English) or outside
quotation marks that have been applied by the style ("false" (default value),
e.g. for British English). As such, it can toggle the style output between

> Douglas Adams, "The Hitchhiker's Guide to the Galaxy," 1979.

and

> Douglas Adams, "The Hitchhiker's Guide to the Galaxy", 1979.

### Default Locale ###

For certain styles (e.g. journal-specific styles) it is undesirable to have
automatic localization applied. CSL 1.0 now supports the `default-locale`
attribute for the `cs:style` element. The possible values of this attribute are
the locale codes (e.g. "fr-FR" for French). If the `default-locale` is set, the
localization of the style is set to that particular locale. A full list of
locale codes can be found in [Zotero's chrome manifest][locale-codes].

N.B. There has been some confusion as to the difference between the
`default-locale` and `xml:lang` attributes. The latter is a standard XML
attribute, which should be used to indicate "the language (and optionally the
locale) of the element content". As such, it can be used in the
"locales-xx-XX.xml" files, or in the locale sections of a CSL style, both of
which include localized content. The role of `default-locale` is different, as
it indicates a preference of which locale should be used. In an effort to reduce
this confusion, CSL 1.0 styles are no longer allowed to specify the `xml:lang`
attribute for `cs:style`. An example of proper use (a CSL style that defaults to
French, but includes a customized English option):

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.xml}
<style default-locale="fr-FR">
  <locale xml:lang="en">
    <style-options punctuation-in-quote="true">
  </locale>
</style>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

(TODO: why is the "en" locale code so often used, and not the full "en-US"? Does
citeproc-js accept both?)

[locale-codes]: https://www.zotero.org/svn/extension/trunk/chrome.manifest

## Formatting ##

### Pages ###

CSL 1.0 offers a number of new ways to handle page data. First, two new
variables have been added to CSL: "page-first" and "number-of-pages". The roles
of the different page variables are:

 - page: page ranges (e.g. of journal articles and book chapters)
 - page-first: the first page of a page range
 - number-of-pages: the total number of pages of an item (e.g. of books)

(TODO: has number-of-pages already been mapped to numPages in Zotero? -->
https://www.zotero.org/trac/changeset/4477) - new variable: page-first

Secondly, it is now possible to set the format of page ranges via the global
(non-localized) option `page-range-format` (set as an attribute on `cs:style`).
The possible values are: "expanded" (e.g. "321-328"), "minimal" ("321-8"), and
"chicago" ("321-28"). When the option is not set, the content of the
page-variable is left unchanged. An example:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.xml}
<style page-range-format="chicago">
  <bibliography>
    <text variable="page">
  </bibliography>
</style>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

### Rich Text Markup within Fields ###

Although not part of CSL 1.0, the new CSL processor in Zotero supports an
exciting new feature that deserves some notice: the ability to apply rich text
markup to (parts of) fields. This feature relies on the use of HTML-like tags.
E.g. if a Zotero item has the title "Ca&lt;sup&gt;2+&lt;/sup&gt; levels in
&lt;i&gt;Homo sapiens&lt;/i&gt;", this will automatically be converted to
"Ca<sup>2+</sup> levels in <i>Homo sapiens</i>" when bibliographies are
generated. Zotero does not (yet) include an interface to quickly apply these
tags, so for now users will have to put them in manually. The supported
tags are:

 * `<i>` - italics
 * `<b>` - bold
 * `<sub>` - subscript
 * `<sup>` - superscript
 * `<sc>` - small-caps

### Delimiters and Collapsing ###

With CSL 1.0, the options to format collapsed citations have been significantly
expanded. First, there are two new options that can be specified as attributes
for `cs:citation`: `year-suffix-delimiter`, which can be used to set a custom
delimiter for subsequent year suffixes (e.g. the slash in "Doe 2000a/b, Smith
1999"), and `after-collapse-delimiter`, which defines a custom delimiter between
collapsed citations and the subsequent citation (e.g. the semicolon in "Doe
2000a, b; Smith 1999, Williams 2002"). By default the delimiter specified in the
`cs:layout` element of `cs:citation` is used for either delimiter. The second
addition is an extra value for the `collapse` attribute of `cs:citation`. If
`collapse` is set to "year-suffix-ranged", citations are collapsed as with
"year-suffix", but now ranges of year-suffixes are collapsed (e.g. "Doe
2000a,b,c,e" would become "Doe 2000a-c,e"). An example of how these options are
set:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.xml}
<style>
  <citation collapse="year-suffix-ranged" year-suffix-delimiter="," after-collapse-delimiter=";">
    <layout delimiter=", ">
    </layout>
  </citation>
</style>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

### Year Suffix ###

CSL 1.0 now contains the `year-suffix` variable, which can be displayed with
`cs:text`. This allows for formatting of year-suffixes (e.g. "2000*a*, *b*").
The variable will only result in a year-suffix if `disambiguate-add-year-suffix`
is set to "true". If the variable is not included in a style, but
`disambiguate-add-year-suffix` is set to "true", the year-suffix will be
appended to the end of the cite. An example:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.xml}
<style>
  <citation>
    <layout delimiter=", ">
      <date variable="issued">
        <date-part name="year"/>
      </date>
      <text variable="year-suffix" font-style="italic"/>
    </layout>
  </citation>
</style>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Related unit tests:

 * [collapse_YearSuffixCollapse.txt](http://bitbucket.org/fbennett/citeproc-js/src/tip/std/humans/collapse_YearSuffixCollapse.txt)
 * [date_YearSuffixDelimiter.txt](http://bitbucket.org/fbennett/citeproc-js/src/tip/std/humans/date_YearSuffixDelimiter.txt)

### Names ###

#### delimiter-precedes-last ####

A very small change: previously, the `delimiter-precedes-last` attribute of
`cs:names` could only be set to `always` or `never`. To prevent the delimiter to
show up for dual contributors ("Doe and Smith"), but to force the delimiter to
show for lists of three or more contributors ("Doe, Smith, and Williams"), you
would have to leave out the attribute. Now, the last behavior can be set
explicitly by using the value "contextual".

#### Formatting Name Parts ####

In CSL 1.0, it is now possible to separately apply formatting (such as boldface
or all-caps) to the given and family name. To do this, include the new
`cs:name-part` element within the `cs:name` element (the value of the `name`
attribute may be set to either "family" or "given"). Note that the order in
which the family and given name are shown is not influenced by use of
`name-part` elements. An example, which would result in names like "John SMITH":

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.xml}
<names variable="author">
  <name form="long">
    <name-part name="family" font-variant="capitalize-all"/>
  </name>
</names>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#### Et al. ####

The `cs:et-al` element may now be explicitly called inside the `cs:names`
element, which adds two important features to the way *et al.* can be used.
First, formatting can now be set independently for the `et-al` term. For
example,
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.xml}
<names variable="author">
  <name/>
  <et-al font-style="italics" prefix=" "/>
</names>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

would result in "Doe *et al.*". Secondly, it is now possible to have different
`et-al` terms for in-text citations and the bibliography. The two terms are
"et-al" (the default) and "and others". For example:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.xml}
<names variable="author">
  <name/>
  <et-al term="and others" prefix=" "/>
</names>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

would yield "Doe and others" (the "and others" is localized like any other
CSL term).

Related unit tests:

 * [name_MixedFormatsWithDecorationsPlusEtAlDecorations.txt](http://bitbucket.org/fbennett/citeproc-js/src/tip/std/humans/name_MixedFormatsWithDecorationsPlusEtAlDecorations.txt)
 * [name_MixedFormatsWithDecorationsPlusAlternateEtAlDecorations.txt](http://bitbucket.org/fbennett/citeproc-js/src/tip/std/humans/name_MixedFormatsWithDecorationsPlusAlternateEtAlDecorations.txt)

### Stripping Periods ###

A new attribute for text elements, strip-periods (a boolean that defaults to
"false"), allows styles to strip periods from month-`cs:date-part`'s and the
`cs:term`, `cs:text` and `cs:label` elements. One of its main uses is to strip
the periods from journal abbreviations. Until more intelligent support for
journal abbreviations is included in Zotero (e.g. via a lookup service to
retrieve missing journal metadata), it is recommended that users include periods
for journal abbreviations in their Zotero database. Styles can then either use
these journal abbrevations as is, or use strip-periods to obtain the version
without periods. An example:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.xml}
<text variable="container-title" form="short" strip-periods="true"/>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

would result in "Appl Environ Microbiol" if the journal abbreviation for the
Zotero item would be "Appl. Environ. Microbiol.".

### Pluralization ###

Pluralization has been a bit of an odd duck, as the implementation in Zotero
differed somewhat from the official CSL schema. In CSL 1.0 and the new Zotero
citeproc-js CSL processor, pluralization options have been aligned: the
attribute `plural` is now available for `cs:text` and `cs:label`. For `cs:text`
the value of `plural` can be either `false` (default), to use the singular
variant of a term, or `true`, to use the plural variant. For `cs:label` the
default value is `contextual` (default, e.g. "p. 43" and "pp. 3-5"). With the
values `never` and `always` it is possible to force `cs:label` to always use
respectively the singular form or the plural form of the specified term. An
example:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.xml}
<number variable="edition" form="ordinal"/>
<text term="edition" plural="true"/>
<group>
  <label variable="page" plural="always"/>
  <text variable="page"/>
</group>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

### Layout Control with the Display Attribute ###

 - Display attributes for positioning blocks comprising a cite.



## Disambiguation

Disambiguation is the automated transformation of in-text references
and corresponding bibliography entries, such that the former uniquely
identify the latter.  Although an indispensable feature of CSL, this
feature has been a source of occasional confusion among users, for
three independent reasons: (1) unwanted transformations can be
triggered by small differences in the form of an author's name in
Zotero database entries; (2) there were sometimes subtle discrepancies
between the Zotero disambiguation algorithms and the rules required by
a given style; and (3) little documentation has been available on what
disambiguation actually *does*.

Building on user feedback and experience with the first deployment of
disambiguation support, CSL 1.0 is now able to offer a rich set of
disambiguation algorithms.  The options described below should allow
you to precisely address the requirements of a target style.  Once
your style is known to apply the correct rules for disambiguation,
Zotero forum support can focus on the need for proper curation of
author names, and some of the fog should begin to lift over this
corner of bibliography management.

### Disambiguation Concepts ###

For clarity, the discussion below will draw upon several special
concepts and distinctions.

Cites versus Names
:    Previous documentation did not distinguish
    between the disambiguation of cites themselves, and the
    disambiguation of creator names.  In the discussion below, the
    former will be referred to as "cite-based disambiguation", and the
    latter as "names-based disambiguation".  In cite-based
    disambiguation, changes are limited to the actual cites that must be
    distinguished.  In names-based disambiguation, changes to the form
    of a name are global, and may affect cites that were unique to begin
    with.

Name transformation level
:    As in previous versions of CSL, a name
    may be cast at three transformation levels: `short` form, which is
    the family name alone ("short form"); `long` form with given name
    initialized ("initialized form"); or the full name ("long form").
    Depending on the attributes set on the `names` node, and the
    disambiguation attributes set on the `citation` node, one or more of
    the three levels may be unavailable.  The available form closest to
    the first of the three forms at any point in processing is "the
    lowest available transformation level", and that nearest to the last
    is "the highest available transformation level".

Cite Pools
:    When performing cite-based disambiguation, the cites
    to be compared, transformed and distinguished are those which have
    the same base `citation` form when the `position="subsequent"`
    condition is true.  Such a group of cites will be referred to below
    as a "cite pool".  Members of a cite pool are compared with one
    another under a progressive series of transformations.  A cite exits
    the pool when it can be distinguished from the others.

Unique Creator Names
:    In names-based disambiguation, the full form
    of the name is assumed to uniquely identify a creator (author,
    editor, etc.) within the document.  This full form of the name is
    the "unique creator name".

Name Pools
:    In names-based disambiguation, if a name form at a
    given transformation level applies to more than one unique creator,
    the unique creator names associated with it form a "name pool".


### Processing Flow ###

Processing begins with the identification of cite pools for cite-based
disambiguation.  If the `disambiguate-add-names` attribute is set to
`true`, the first stage of processing in each cite pool adds names to
each cite incrementally, using the lowest available transformation
level for each name added.

When names are added to a cite during the add-names phase, the act of
adding the name may give rise to a *name pool* for purposes of
names-based disambiguation.  Accordingly, if required by the style
options, names-based disambiguation is performed on the name before it
is added to the cites in a cite pool during cite-based disambiguation.

Names-based disambiguation will be performed in this way if and
only if the `disambiguate-add-givenname` attribute is set to `true`
*and* the `givenname-disambiguation-rule` attribute is set to one
of the following values, or is absent (and hence carries the default
value of `all-names`):

 * `all-names`
 * `all-names-with-initials`
 * `primary-name`
 * `primary-name-with-initials`

As described below, the latter two rules in this list will touch
only names that appear in the first position in a list of creator
names; with these two rules, all other names will always use
the lowest transformation level available in the `names` node
concerned, without regard to disambiguation considerations.

If the `disambiguate-add-givenname` attribute is set to `true` and the
value of `givenname-disambiguation-rule` is set to `by-cite`, name
pools will be ignored, and no names-based disambiguation will be
performed.  This may result in lingering ambiguity between cites.
For example, consider the following bibliographic information:

<table>
  <th>
    <td>Item</td>
    <td>Authors</td>
    <td>Title</td>
    <td>Year</td>
  </th>
  <tr>
    <td>[entry-1]</td>
    <td>Jane Noakes, John Doe, Jane Roe</td>
    <td>Book A</td>
    <td>1999</td>
  </tr>
  <tr>
    <td>[entry-2]</td>
    <td>Jane Noakes, Richard Doe, Jane Roe</td>
    <td>Book B</td>
    <td>1999</td>
  </tr>
</table>

In a style that has the form of the creator name set to `short`,
`et-al-min` set to `3` and `et-al-use-first` set to `1`,
the lowest available transformation level for the first name
of both `[entry-1]` and `[entry-2]` will be the short form, "Doe".
If `disambiguate-add-names` is set
to `true`, and `disambiguate-add-givenname` is *not* set,
names will be added without names-based disambiguation.  The value
of `et-al-use-first` will be incrementally relaxed, until the
names for both cites has expanded to "Doe, Roe, Noakes".

To help dispell such lurking ambiguity without resorting to
names-based disambiguation, `disambiguate-add-givenname` can be set to
`true` and `givenname-disambiguation-rule` to `by-cite`.  This will
cause the given names in cites that have expanded to include all
available names without exiting their cite pool to be retried with one
(and only one) increment to their transformation level.  Only
increments that reduce the number of ambiguous cites in the pool will
be retained.  If a cite is successfully disambiguated by incrementing
the name transformation level in this phase, any trailing names not
essential to disambiguation will be dropped.  In the case described
above, the processor would return the names "Noakes, J. Doe, et al."
and "Noakes, R. Doe, et al.", which is sufficient to disambiguate the
cites.

Once the adding of names and given names has been completed for a cite
pool, a final disambiguation phase may be invoked, if the appropriate
attributes are set and a cite pool still exists.  If the attribute
`disambiguate-year-suffix` is set to `true`, the cites in the pool
will each receive a letter or letters as a year suffix.  This option
always results in a successful final disambiguation of the cite.

If `disambiguate-year-suffix` is not used, a style may attempt to
disambiguate the `position="subsequent"` form of references by testing
for `disambiguate="true"`.  This boolean value will evaluate true
*only* for cites that are members of a cite pool in this final phase
of processing.  In the example above, a style that includes the title
in the subsequent form of the cite only when `disambiguate` is `true`
would be able to successfully disambiguate the two references.  When
this type of disambiguation fails, the added information is dropped
from the cite.

### Controlling Given Name Disambiguation ###

As mentioned above, CSL 1.0 introduces a new
`givenname-disambiguation-rule` attribute to select the algorithm to
be used during names-based disambiguation.  With a value of `by-cite`,
no names-based disambiguation will be performed, and any addition or
expansion of given names in one citation will not affect other
occurences of that creator's name elsewhere in the bibliography.

#### Four Given Name Disambiguation Rules ####

Four values available on the `givenname-disambiguation-rule` attribute
can be used to implement a large number of precisely defined
disambiguation schemes, greatly extending the scope of disambiguation
support.[^komrade] The options are:

`all-names`
:    Names-based disambiguation will be performed on all names
    that appear in the document.  No ambiguous short names or
    initialized names will remain if this option is set, regardless
    of what the lowest available transformation level may be.  
    If names begin at the lowest transformation level (short name),
    the transformation level of a name will be incremented to
    second level (initialized name), and then to the highest level
    (full name), stopping when the unique creator name has been
    unambiguously identified.  This may result in a mixture of
    initialized names and full names within the bibiliography.
    (this is the default value)

`all-names-with-initials`
:    Names-based disambiguation will be performed on all names that
    appear in the document, but no name will be raised above the
    second transformation level (initialized name).  Names added
    with this option in force may be ambiguous, and therefore a resort to
    the final phase of disambiguation (`disambiguate-year-suffix` or
    the `disambiguate="true"` conditional) is more likely to be needed
    to uniquely identify references.

`primary-name`
:    This performs the same disambiguation operations as the `all-names`
    value, but names-based disambiguation is only performed on the first name in the
    list of creators used in a cite, and any increment in the name
    transformation level is applied only to first-listed names.
    Names appearing in the second and later positions in any
    cite will always use the lowest available name
    transformation level, without regard to disambiguation.

`primary-name-with-initials`
:    Like the `primary-name` value, this performs the same operations
    as its `all-names-with-initials` corollary, but is limited
    to first-listed names only.


[^komrade]: A hat tip to user
[`komrade`](http://www.zotero.org/komrade) of the Zotero forums, whose
review of the major style guides led to this array of rule-sets.


#### Short Name or Full Name Binary Selection ####

If a style requires short names, with full names to be used for
disambiguation (and never initialized names), this effect can be
achieved by the following:

 * On the `citation` node:
     - Set `disambiguate-add-givennames` to `true`; and
     - Set `givenname-disambiguation-rule` to `all-names` or `primary-name`
       as appropriate;
 * On the `name` node:
     - Set the form attribute to `short`; and
     - Do *not* set the `initialize-with` attribute.

If you get stuck, you should be able to get advice on the forums.


## Advanced Sorting ##

CSL 1.0 features a number of extensions to support more complex sorting rules.
First, if the `form` attribute of `cs:name` is now set to "count", the length of
the name list will be returned. For example, for an item with three authors
(e.g. Jones, Smith and Doe), a value of "3" would be obtained. This allows CSL
styles to sort according to the number of authors (or other types of
contributors). The second addition consists of two new attributes for the
`cs:key` element, `names-min` and `names-use-first`. The integer values set for
these attributes override the values of `et-al-min` and `et-al-min-first`,
respectively. The following example shows how these attributes can be used to
sort a bibliography alphabetically, taking only the first author into account:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.xml}
<style>
  <macro name="author">
    <names variable="author">
      <name name-as-sort-order="all" />
    </names>
  </macro>
  <bibliography>
    <sort>
      <key macro="author" names-min="1" names-use-first="1"/>
    </sort>
    <layout>
    </layout
  </bibliography>
</style>
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A more elaborate example can be found in the following unit test:

Related unit tests:
 * [sort_AguStyle](http://bitbucket.org/fbennett/citeproc-js/src/tip/std/humans/sort_AguStyle.txt)

## Back-References in Note Styles ##

XXXXX

- near-note position and near-note-distance option
- added first-reference-note-number variable (refers to the note-number of the note that is the first to mention the current reference)

## Terms and Term-foolery ##

XXXXX

 - new term: reference item (ADDED) --> RZ: shouldn't "reference item" be renamed to "source" (which is the contents of the singular term)?
 - new term: editortranslator (ADDED) --> RZ: I think this belongs in the names-section
 - new terms: ordinals and long ordinals (ADDED) --> RZ: this would be formatting
 - added long-ordinal' value option of cs:number --> RZ: idem

## Looking back - CSL 0.8 ##

Perhaps you just discovered that your custom CSL style is invalid and won't
upgrade to CSL 1.0. Or you might want to see how CSL has changed over time. Or
maybe you just like to reminisce. Whatever your reasons, you can still access
the previous version of the CSL schema:

[CSL 0.8](http://sourceforge.net/apps/trac/xbiblio/browser/csl/schema/tags/0.8/) (released on 2009/03/21)

## Feedback ##

Do you still miss a feature in CSL 1.0? Do you think the documentation is
incomplete, unclear or incorrect? We welcome feedback on the ...
--> do we want feedback on the Zotero forums (Citation Styles forum category,
http://forums.zotero.org/11/), or on the xbiblio mailing list? Or will the new
CSL website include a dedicated forum for all things CSL?

## Anything below this point is not meant for inclusion in the final version ##

### Unfinished Business ###

 - get a proper CSL website
 - finalize spec
 - clean up (i.e. remove) some of the comments/annotations in the schema
 - complete this document (link to related unit tests:
 http://bitbucket.org/fbennett/citeproc-js/src/tip/std/humans/)
 - test conversion of old styles to new format (check if the converted styles
 all validate).
 - still have to describe some variables in spec (year-suffix, first-reference-note-number)

### Errata ###

 - no more group-by (maybe we won't have to mention this, as none of the current styles seem to use it)
 - is-date is no more (maybe we won't have to mention this, as none of the current styles seem to use it)

Post 1.0rc1 changesets (rc1 was tagged 08/15/09), until september 10th:

http://sourceforge.net/apps/trac/xbiblio/changeset/1157
Removing class attribute from cs:group and start/end-attributes from cs:names.

http://sourceforge.net/apps/trac/xbiblio/changeset/1163
Removed orphaned cs:translator element

http://sourceforge.net/apps/trac/xbiblio/changeset/1168
Require xml:lang on cs:locale in CSL styles.

http://sourceforge.net/apps/trac/xbiblio/changeset/1171
Removed strip-periods from cs:term

http://sourceforge.net/apps/trac/xbiblio/changeset/1173
Add particle-in-name-sort option attribute to bibliography element. (this one has to go again probably)

http://sourceforge.net/apps/trac/xbiblio/changeset/1174
Removed point-locator attribute from cs:text (use locator variable instead)
Removed form attribute from cs:text when used for macros.

http://sourceforge.net/apps/trac/xbiblio/changeset/1177
Removed delimiter as an option from cs:layout when used in cs:bibliography
Clarified conditional behavior (as OR operator)
Removed ability to specify multiple variables in cs:date and cs:text. This means that the delimiter on cs:date should now act to delimite the date-parts.

http://sourceforge.net/apps/trac/xbiblio/changeset/1178
Removed the delimiter as a possible attribute from cs:date when used to call localized dates.

http://sourceforge.net/apps/trac/xbiblio/changeset/1183
Allow (overriding) formatting attributes on cs:date-part when used in-style in a call for a localized date.

http://sourceforge.net/apps/trac/xbiblio/changeset/1184
Removed delimiter as a possible attribute of cs:text (part II of the http://sourceforge.net/apps/trac/xbiblio/changeset/1177 patch)

http://sourceforge.net/apps/trac/xbiblio/changeset/1188
applying info patch from Rintze, moving categor terms to separate file, contributor roles to csl-variables.rnc

http://sourceforge.net/apps/trac/xbiblio/changeset/1189
removed text-case attribute from 'formatting' pattern, added it to cs:text (only)

http://sourceforge.net/apps/trac/xbiblio/changeset/1190
adding text-case to label, number, date-part, name-part

http://sourceforge.net/apps/trac/xbiblio/changeset/1191
adding csl-categories.rnc

http://sourceforge.net/apps/trac/xbiblio/changeset/1192
Changed "true" value of second-field-align to "flush"

### Links - Revision histories of schema files ###

A short history on the path from CSL 0.8 to 1.0: development of the schema
started with csl.rnc in trunk. The schema was split in the split branch into
csl.rnc, csl-core.rnc, csl-variables.rnc, csl-types.rnc and csl-terms.rnc.
csl-core.rnc was then folded into csl-rnc. Once CSL 1.0RC1 was tagged, the split
branch was merged back to the trunk.

pre-split:
http://sourceforge.net/apps/trac/xbiblio/log/csl/schema/trunk/csl.rnc

split:
http://sourceforge.net/apps/trac/xbiblio/log/csl/schema/branches/split/csl-core.rnc?rev=1087
https://sourceforge.net/apps/trac/xbiblio/log/csl/schema/branches/split/csl.rnc?rev=1125
http://sourceforge.net/apps/trac/xbiblio/log/csl/schema/branches/split/csl-variables.rnc?rev=1125
http://sourceforge.net/apps/trac/xbiblio/log/csl/schema/branches/split/csl-types.rnc?rev=1125
http://sourceforge.net/apps/trac/xbiblio/log/csl/schema/branches/split/csl-terms.rnc?rev=1125

merge:
http://sourceforge.net/apps/trac/xbiblio/log/csl/schema/trunk/csl.rnc
http://sourceforge.net/apps/trac/xbiblio/log/csl/schema/trunk/csl-variables.rnc
http://sourceforge.net/apps/trac/xbiblio/log/csl/schema/trunk/csl-types.rnc
http://sourceforge.net/apps/trac/xbiblio/log/csl/schema/trunk/csl-terms.rnc
http://sourceforge.net/apps/trac/xbiblio/log/csl/schema/trunk/csl-categories.rnc


