===========================
`Citation Style Language`__
===========================
~~~~~~~~~~~~~~~~~~~~~~
Language Specification
~~~~~~~~~~~~~~~~~~~~~~

__ `Table of Contents`_

.. class:: info-version

   version x.x

.. class:: info-date

   30 January 2010

.. class:: contributors

   Authors
       * Frank Bennett
       * Bruce D'Arcus
       * Rintze Zelle

.. |link| image:: link.png


========

.. contents:: Table of Contents

========


Introduction
------------

The Citation Style Language (CSL) is an `XML
<http://en.wikipedia.org/wiki/XML>`_ format for describing the formatting of
in-text citations, notes and bibliographies. CSL offers:

-  An open format that may be used by any application
-  The ability to write compact and robust styles
-  Extensive support for style requirements
-  Automatic style localization
-  Easy distribution and updating of styles
-  A fast growing library with thousands of freely available styles

This document is meant as a complete and accurate specification of CSL 1.0.
Additional documentation, such as the CSL schema, CSL styles, and information on
how to add CSL support to applications, can be found at the official home of
CSL, `citationstyles.org <http://citationstyles.org>`_.

CSL Styles - Basic Structure
----------------------------

Namespacing
~~~~~~~~~~~

All elements in CSL are `namespaced
<http://en.wikipedia.org/wiki/XML_Namespace>`_. The recommended prefix ``cs`` is
attached to element names throughout this specification, but is usually omitted
from CSL styles when the default namespace is declared in the root ``cs:style``
element.

The CSL namespace
    "http://purl.org/net/xbiblio/csl"

XML Declaration
~~~~~~~~~~~~~~~

It is highly recommended to initialize each CSL style with an XML declaration,
specifying the version of XML used as well as the character encoding. In most
cases, the declaration will be:

.. sourcecode:: xml

    <?xml version="1.0" encoding="UTF-8"?>

The Root Element - ``cs:style``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The root element of a CSL style is ``cs:style``. This element carries the
following arguments:

``class``
    Specifies whether the style uses notes (value "note") or in-text citations
    ("in-text").

``default-locale`` (optional)
    Fixes style localization to the `locale
    <http://books.xmlschemata.org/relaxng/ch19-77191.html>`_ specified. This is
    desirable for most journal styles.

``version``
    Indicates with which version of the CSL schema the style is compatible.
    Should have a value of "1.0" for CSL 1.0-compatible styles.

``xmlns`` (optional)
    The namespace declaration that binds the elements in the style to the given
    namespace URI. CSL elements in the style don't need individual namespace
    declarations if this attribute is set to "http://purl.org/net/xbiblio/csl".

In addition, ``cs:style`` may carry any of the `global options`_, as well as the
`hierarchical name options`_.

An example of a style preamble:

.. sourcecode:: xml

    <?xml version="1.0" encoding="UTF-8"?>
    <style xmlns="http://purl.org/net/xbiblio/csl" version="1.0" class="in-text" default-locale="fr-FR">

Child Elements of ``cs:style``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

All independent CSL styles share the same basic structure, with five possible
types of child elements in the ``cs:style`` root element. The roles of each of
these elements (which will be described in more detail later) are:

``cs:info``
    The ``cs:info`` element must be included as the first child element of
    ``cs:style``. It contains the metadata that describes the style (the name of
    the style, a unique style identifier, the style authors, etc.).

``cs:citation``
    This required element describes the formatting instructions of in-text
    citations or notes.

``cs:bibliography`` (optional)
    This optional element describes the formatting instructions of the
    bibliography.

``cs:macro`` (optional)
    Styles may include one or more ``cs:macro`` elements. Macros allow for reuse
    of formatting instructions, which helps keeping styles compact and
    maintainable.

``cs:locale`` (optional)
    Styles may include one or more ``cs:locale`` elements. These elements allow
    styles to override the default localization data (terms, date formats and
    formatting options) on a per-locale basis.

Info
^^^^

The ``cs:info`` element contains all the style's metadata, many elements of
which are borrowed from the `Atom Syndication Format
<http://tools.ietf.org/html/rfc4287>`_. Although it has no influence on how
citations are formatted, complete and correct metadata is important if styles
are made publicly available. Below is an example of a ``cs:info`` element,
followed by a description of all possible elements.

.. sourcecode:: xml

    <info>
     <title>Style Title</title>
     <id>http://www.zotero.org/styles/style-title</id>
     <link href="http://www.zotero.org/styles/style-title" rel="self"/>
     <author>
      <name>Author Name</name>
      <email>name@domain.com</email>
      <uri>http://www.domain.com/name</uri>
     </author>
     <category citation-format="author-date"/>
     <category field="zoology"/>
     <updated>2008-10-29T21:01:24+00:00</updated>
     <summary>Style for Some Journal</summary>
     <rights>This work is licensed under a Creative Commons
             Attribution-Share Alike 3.0 Unported License
             http://creativecommons.org/licenses/by-sa/3.0/</rights>
    </info>

``cs:author`` and ``cs:contributor`` (optional)
    One or more of these elements may be used to acknowledge style authors and
    contributors. Authorship is generally limited to those who have written a
    new style, or have made significant changes to existing styles, while
    contributorship can be assigned to those who have made small changes. Both
    elements require one child element, cs:name, and allow for two others,
    cs:email, and cs:uri, indicating respectively the name, email address and
    URI of the author or contributor in question.

``cs:category`` (optional)
    Styles may be assigned one or more categories. This information can be used
    to organize style repositories. Two types of categories exist. The first
    category type describes how in-text citations are rendered. For this type
    the ``citation-format`` attribute is set to one of the following values:
    
    -  "author-date": e.g. "... (Doe, 1999)"
    -  "author": e.g. "... (Doe)"
    -  "numeric": e.g. "... [1]"
    -  "label": e.g. "... [doe99]"
    -  "note": the citation appears as a footnote or endnote
    
    The second category type indicates the fields or disciplines for which the
    style is relevant. For this category type the ``field`` attribute is set to
    one of the following values:
    
    -  "anthropology"
    -  "astronomy"
    -  "biology"
    -  "botany"
    -  "chemistry"
    -  "communications"
    -  "engineering"
    -  "generic-base" (used for generic styles like Harvard and APA)
    -  "geography"
    -  "geology"
    -  "history"
    -  "humanities"
    -  "law"
    -  "linguistics"
    -  "literature"
    -  "math"
    -  "medicine"
    -  "philosophy"
    -  "physics"
    -  "psychology"
    -  "sociology"
    -  "science"
    -  "political\_science"
    -  "social\_science"
    -  "theology"
    -  "zoology"

``cs:id``
    This required element should contain a URI. This identifier establishes the
    identity of the style. A valid, stable, and unique URL that resolves to the
    style is desired if the style is made publicly available. Keeping the same
    URI is crucial for applications that support automatic style updating.

``cs:issn``/``cs:issnl`` (optional)
    Journal-specific styles may include one or more ``cs:issn`` elements,
    containing the journal's ISSN identifiers (multiple ISSNs can be assigned to
    a single journal, e.g. for the print and online editions). In addition, the
    ``cs:issnl`` element may be used for the newly established `ISSN-L
    identifier <http://www.issn.org/2-22637-What-is-an-ISSN-L.php>`_.

``cs:link`` (optional)
    The ``cs:link`` element is used to specify a URI (usually a URL), which is
    set on the ``href`` attribute. The accompanying ``rel`` attribute must be
    set to indicate the relation of the URI to the style. The possible values of
    ``rel``:
    
    -  "self": if the URI is that of the CSL style itself. Needed for automatic
       style updating.
    -  "independent-parent": if the URI is that of the parent CSL style, the
       content of which should be used for the citation formatting. Needed for
       `dependent styles`_.
    -  "template": if the URI is that of the CSL style from which the current
       independent style is derived. May be used to indicate style parentage.
    -  "documentation: if the URI points to the online style documentation.
    
    The ``cs:link`` element may contain textual content to describe the link,
    and may carry the ``xml:lang`` attribute to specify the language of either
    the link description or of the link target (the value should be a
    `xsd:language locale code
    <http://books.xmlschemata.org/relaxng/ch19-77191.html>`_).

``cs:published`` (optional)
    The contents of this element must be a `timestamp
    <http://books.xmlschemata.org/relaxng/ch19-77049.html>`_. This timestamp
    indicates when the style was initially created or made available.

``cs:rights`` (optional)
    This element specifies the license under which the style file is released.
    See, e.g. the `Creative Commons <http://creativecommons.org/license/>`_. The
    element may include a ``xml:lang`` attribute to specify the language of the
    content (the value should be an `xsd:language locale code
    <http://books.xmlschemata.org/relaxng/ch19-77191.html>`_).

``cs:summary`` (optional)
    This element gives a summary of the style.The element may include a
    ``xml:lang`` attribute to specify the language of the content (the value
    should be an `xsd:language locale code
    <http://books.xmlschemata.org/relaxng/ch19-77191.html>`_).

``cs:title``
    The contents of this required element should be the name of the style as it
    should be shown to users. The element may include a ``xml:lang`` attribute
    to specify the language of the content (the value should be an `xsd:language
    locale code <http://books.xmlschemata.org/relaxng/ch19-77191.html>`_).

``cs:updated``
    The contents of this required element must be a `timestamp
    <http://books.xmlschemata.org/relaxng/ch19-77049.html>`_. This timestamp is
    used for automatic updating of styles.

Citation
^^^^^^^^

The ``cs:citation`` element describes the formatting of citations, which can
consist of one or multiple references to bibliographic sources, and may appear
in the form of either in-text citations (generally formatted as label [doe99],
number [1], author [Doe] or author-date descriptors [Doe 1999]) or notes. The
required ``cs:layout`` child element describes what, and how, bibliographic data
should be included in the citations (see the chapter on the `Layout element
<#layout>`_). The ``cs:citation`` element may carry attributes for
citation-specific formatting options and hierarchical name options (see the
`Citation-specific Options`_ and `Hierarchical Name Options`_ sections).
Finally, the optional ``cs:sort`` element, which should precede the
``cs:layout`` element, specifies how citations consisting of multiple references
should be sorted (see the chapter on `Sorting`_). An example of a
``cs:citation`` element:

.. sourcecode:: xml

    <citation option="option-value">
      <sort>
        <!-- sort keys -->
      </sort>
      <layout>
        <!-- rendering elements -->
      </layout>
    </citation>

**A note to developers of CSL processors** Note styles are unique in that
citations may effectively become full sentences. Because of this, the first
character of the output should be uppercased when a citation is footnoted
without any additional text. By contrast, if the citation occurs within a
pre-existing footnote, and is preceded by non-citation text, then it should be
printed as is.

Bibliography
^^^^^^^^^^^^

The ``cs:bibliography`` element describes the formatting of bibliographies, and
is used in a similar way as ``cs:citation``: the required ``cs:layout`` child
element describes how each reference should be formatted in the bibliography,
while the optional ``cs:sort`` element (which should precede the ``cs:layout
element) specifies the sorting order of the references in the bibliography. In
addition, the ``cs:bibliography`` element may carry attributes for
bibliography-specific formatting options and hierarchical name options (see the
`Bibliography-specific Options`_ and `Hierarchical Name Options`_ sections).

.. sourcecode:: xml

    <bibliography option="option-value">
      <sort>
        <!-- sort keys -->
      </sort>
      <layout>
        <!-- rendering elements -->
      </layout>
    </bibliography>

Macro
^^^^^

Macros, which are defined using ``cs:macro`` elements, can contain the same set
of `rendering elements`_ that are available within ``cs:layout`` inside
``cs:citation`` or ``cs:bibliography``. Macros allow formatting instructions to
be reused, both within the same style (e.g. the same macro could be used in both
``cs:citation`` and ``cs:bibliography``) as well as between styles. It is
therefore recommended to use common macro names as much as possible. Correct use
of macros can greatly improve the readability, compactness and maintainability
of styles. Ideally, the contents of ``cs:citation`` and ``cs:bibliography``
should be kept compact and agnostic of resource types (i.e. books, journal
articles, etc.), depending mainly on macro calls.

By convention, macros are placed after any ``cs:locale`` elements and before the
``cs:citation`` element. The ``cs:macro`` element must carry the ``name``
attribute (the value of which is used to identify the macro), and contain one or
more `rendering elements`_. Once defined, macros can be called by `rendering
elements`_ in ``cs:citation`` or ``cs:bibliography`` (from within
``cs:layout``), or by the `rendering elements`_ in other macros.

The following example shows a style that call the "title" macro. This macro
outputs the contents of the title variable, applying italics when the resource
type is "book":

.. sourcecode:: xml

    <style>
      <macro name="title">
        <choose>
          <if type="book">
            <text variable="title" font-style="italic"/>
          </if>
          <else>
            <text variable="title"/>
          </else>
        </choose>
      </macro>
      <citation>
        <layout>
          <text macro="title"/>
        </layout>
      </citation>
    </style>

Locale
^^^^^^

CSL supports localization of terms, date formats and formatting options. Default
localization data for several tens of locales is provided through
"locales-xx-XX.xml" files ("xx-XX" represents the locale code, e.g. "en-US" for
US English). Localization data can also be included in styles, using one or more
of the optional ``cs:locale`` elements, which by convention are included
directly after the ``cs:info`` element. For each ``cs:locale`` element, the
relevant locale can be indicated with the ``xml:lang`` attribute (set to an
`xsd:language locale code
<http://books.xmlschemata.org/relaxng/ch19-77191.html>`_). If the attribute is
absent, the ``cs:locale`` element's localization data will apply to all locales.

See `Localized Terms`_, `Localized Dates`_ and `Localized Options_ in the
`Locale Files - Basic Structure`_ section for more details on the use of
``cs:locale``.

An example illustrating the use of ``cs:locale`` in a CSL style:

.. sourcecode:: xml

    <style>
      <locale xml:lang="en">
        <terms>
          <term name="editortranslator" form="short">
            <single>ed. &amp; trans.</single>
            <multiple>eds. &amp; trans.</multiple>
          </term>
        </terms>
      </locale>
    </style>

Locale prioritization
'''''''''''''''''''''

Locale codes can indicate either the language (e.g. "en" for English) or the
language dialect (e.g. "en-US" for American English and "en-GB" for British
English). While the "locales-xx-XX.xml" files are only maintained for language
dialects, the (optional) ``xml:lang`` attribute on ``cs:locale`` in styles may
be set to languages as well as language dialects. The "locales-xx-XX.xml" files
must contain the full set of localization data. The ``cs:locale`` elements are
typically only used in styles to redefine the localization data provided via the
"locales-xx-XX.xml" files, and these may include only the localization data that
should be redefined. The existence of two types of locale codes (languages and
language dialects), and the ability to define localization both in
"locales-xx-XX.xml" files and in styles, requires prioritization of localization
data. This prioritization can best be illustrated with an example. If a CSL
processor is asked to localize the style output to "de-AT" (Austrian German),
the priority of the locale data is as follows:

Localization data specified in styles using ``cs:locale``

1. ``xml:lang`` set to "de-AT" (Austrian German)
2. ``xml:lang`` set to "de" (German)
3. ``xml:lang`` not set (all locales)

Localization data stored in "locales-xx-XX.xml" files

4. ``xml:lang`` set to "de-AT" (Austrian German)
5. ``xml:lang`` set to "de-DE" (Standard German)
6. ``xml:lang`` set to "en-US" (American English)

Thus, when a style does not include a ``cs:locale`` element for the "de-AT"
locale, or when it exists but is incomplete, the missing localization data is
retrieved from the ``cs:locale`` set to "de" (if present). If the set of
localization data is still incomplete, the ``cs:locale`` element without a
``xml:lang`` element is used (if present). The localization data is completed
with the data stored in the "locales-xx-XX.xml" files. If the file for "de-AT"
does not exist, fallback locales consist of "de-DE" and, as a last resort,
"en-US".

Dependent Styles
~~~~~~~~~~~~~~~~

In addition to independent styles, which are self-contained, CSL
also supports dependent styles, which function similar to aliases
or shortcuts. Dependent styles are generally used when multiple
journals share the same style format. In such a case, there would
be a single independent master style to describe the format (e.g.
"Nature Journals"). Then, dependent styles could be created for all
journals that use this format (e.g. "Nature Biotechnology", "Nature
Nanotechnology", etc.). These styles only contain the ``cs:info``
element (containing a ``cs:link`` element to link to the
independent master style) to provide the journal's metadata. In
this way, style repositories can show entries for the individual
journals, without the need to duplicate formatting instructions.
And if the common format has to be modified, it is sufficient to
change just the independent master style.

Note that dependent styles cannot be used to indicate changes
compared to the independent master style. If there is any
difference in formatting between two styles, however small, two
separate CSL styles have to be created.

Locale Files - Basic Structure
------------------------------

CSL ships with "locales-xx-XX.xml" files (the "xx-XX" is the locale
code, e.g. "en-US" for US English) that contain preset localization
data of terms, dates and formatting options. The collection of
available locale files can be found
`here <http://bitbucket.org/bdarcus/csl-locales/>`_.
For details on in-style overriding of localization data, see the
`Locale`_ section.

Each "locales-xx-XX.xml" file contains the localization data for a
single locale. Like CSL styles, these files are written in XML, and
contain an `XML declaration`_. The ``cs:locale``
root element requires the ``xml:lang`` attribute to specify the
locale of the data, and typically carries a ``xmlns`` namespace
declaration. There are three (required) child elements,
``cs:terms``, ``cs:date`` and ``cs:style-options``. An example of
the (strongly reduced) contents of a locale file:

.. sourcecode:: xml

    <?xml version="1.0" encoding="UTF-8"?>
    <locale xml:lang="en" xmlns="http://purl.org/net/xbiblio/csl">
      <terms>
        <term name="no date">n.d.</term>
        <term name="et-al">et al.</term>
        <term name="page">
          <single>page</single>
          <multiple>pages</multiple>
        </term>
        <term name="page" form="short">
          <single>p.</single>
          <multiple>pp.</multiple>
        </term>
      </terms>
      <date form="numeric">
        <date-part name="month" form="numeric" suffix="-"/>
        <date-part name="day" suffix="-"/>
        <date-part name="year"/>
      </date>
      <style-options punctuation-in-quote="true"/>
    </locale>

Localized Terms
~~~~~~~~~~~~~~~

Terms are localized strings. For example, a style could specify
that the term "and" should be used. The exact string that appears
in the style output then depends on the locale, e.g. "and" for
English, or "und" for German. The terms in "locales-xx-XX.xml"
files are defined using ``cs:term`` elements, child elements of
``cs:terms``, itself a child element of ``cs:locale``. Terms are
identified by the value of the ``name`` attribute of ``cs:term``.
In addition to the so called 'simple terms', for which the element
contents consists only of the translated string, there are also
'compound terms', which contain both singular and plural variants
of a term (e.g. "page" and "pages") using the child elements
``cs:single`` and ``cs:multiple``, respectively. For some terms,
multiple forms are available (the form is indicated by the value of
the ``form`` attribute on ``cs:term``). The different forms are:


-  "long" - the default, e.g. "editor"/"editors" for the term
   "editor"
-  "verb" - e.g. "edited by" for the term "editor"
-  "short" - e.g. "ed"/"eds" for the term "editor"
-  "verb-short" - e.g. "ed" for the term "editor"
-  "symbol" - e.g. "§" for the term "section"

Examples of how terms are defined have been given above in
`Locale Files - Basic Structure`_.

The complete list of supported terms can be found in
`Appendix III - Terms`_.

TODO: explain role of cs-terms.extension (in csl-terms.rnc).

Localized Dates
~~~~~~~~~~~~~~~

Dates can be either localized or non-localized. The default
localized date formats are defined in the "locales-xx-XX.xml" files
using the ``cs:date`` element as child element of ``cs:locale``.
Each locale file contains two date formats, which are distinguished
by the value of the ``form`` attribute on ``cs:date``: "numeric"
(e.g. "12-15-2005" for the English locale), and "text" (e.g.
"December 15, 2005"). The date format is derived from the order of
the ``cs:date-part`` elements (with ``name``-values of ``day``,
``month``, ``year`` and ``other``), which are child elements of
``cs:date`` and from any `formatting`_ attributes on
the ``cs:date`` and ``cs:date-part`` elements. In addition, a
`delimiter`_ may be set on ``cs:date`` (delimiting the
``cs:date-part`` elements), and `affixes`_ may be
applied to the ``cs:date-part`` elements.

N.B. The reason affixes are not allowed on ``cs:date`` when used as
a child element of ``cs:locale`` is to allow localized dates to be
used in combination with custom affixes such as parentheses. E.g. a
macro could specify:

.. sourcecode:: xml

      <macro name="issued">
       <date variable="issued" form="numeric" prefix="(" suffix=")"/>
      </macro>

Localized Options
~~~~~~~~~~~~~~~~~

CSL currently includes a single localized global option (affecting
both citations and the bibliography), ``punctuation-in-quote``.
This option is set in the "locales-xx-XX.xml" files as an attribute
on ``cs:style-options``, a child element of ``cs:locale``.

Rendering Elements
------------------

Rendering elements are used to specify what bibliographic data
should be shown in citations and bibliographies, the order of the
data, and, and to a certain extent, how the data should be
decorated.

Layout
~~~~~~

As discussed in the `citation`_ and
`bibliography`_ sections, ``cs:layout`` is a
required child element of both ``cs:citation`` and
``cs:bibliography``. All the rendering elements (with the exception
of ``cs:layout`` itself) that should appear in the citations and
bibliography should be nested inside the ``cs:layout`` element. The
``cs:layout`` element accepts both `affixes`_ and
`formatting`_ attributes. When used in the
``cs:citation`` element, a `delimiter`_ can be set to
separate multiple items in a single citation. For example,

.. sourcecode:: xml

    <layout prefix="(" suffix=")" delimiter=", ">
      <text variable="citation-number"/>
    </layout>

would result in citations like "(1, 2)".

Text
~~~~

The ``cs:text`` element is used to output text. This text can
originate from different sources. For each instance of the
``cs:text`` element, the source-type is indicated as an attribute.
The attribute value acts as an identifier. For example,

.. sourcecode:: xml

    <text variable="title" prefix="Title: " form="short" font-style="italic"/>

indicates that the source is a ``variable``, and that the
``variable`` that should be displayed is short form of "title" (in
italics). The different sources are:


-  ``variable`` - the text contents of a variable. The optional
   ``form`` attribute can be set to either "long" (the default) or
   "short" to select the long or short forms of variables, e.g. the
   full and short title.
-  ``macro`` - the text contents generated by a macro. The value of
   ``macro`` should correspond to the value of the ``name`` attribute
   of the desired ``cs:macro`` element.
-  ``term`` - the text of a (localized) term. The complete list of
   supported terms can be found in
   `Appendix III - Terms`_. The ``plural`` attribute
   can be set for ``cs:text`` to choose either the singular (value
   "false", the default) or plural variant (value "true") of a term.
   In addition, the ``form`` attribute can be set for those terms for
   which multiple forms are available, with values:
   
   -  "long" - e.g. "editor"/"editors" for the term editor
   -  "verb" - e.g. "edited by" for the term editor
   -  "short" - e.g. "ed"/"eds" for the term editor
   -  "verb-short" - e.g. "ed" for the term editor
   -  "symbol" - e.g. "§" for the term section

-  ``value`` - used to output verbatim text, which is set via the
   value of ``value`` (e.g. value="some text")

In all cases the attributes for `affixes`_, `formatting`_,
`text-case`_ and `strip-periods`_ may be applied to ``cs:text``.

Date
~~~~

The ``cs:date`` element is used to output the dates of one or more
`date variables`_ (set with the ``variable``
attribute), in either a localized or a non-localized format.

To use a localized date format, use ``cs:date`` with the ``form``
attribute. The value of this attribute can be set either to
"numeric" (for a numeric date format, e.g. "12-15-2005"), or to
"text" (e.g. "December 15, 2005"). Localized date formats can be
customized in two ways. First, the ``date-parts`` attribute may be
included on ``cs:date``. The value of this attribute determines
which ``cs:date-part`` elements are shown. The possible values:


-  "year-month-day" - default, displays year, month and day
-  "year-month" - displays year and month
-  "year" - displays year only

Secondly, any of the ``cs:date-part`` elements may
be included as child elements of ``cs:date`` (See `Date-part`_). The included elements
do not affect which, and in which order, the ``cs:date-part``
elements are included in the rendered date. Instead, overriding
values can be set for any of the attributes of the individual
``cs:date-part`` elements, with the exception of
`affixes`_. For example, the ``form`` attribute of the
month-``cs:date-part`` element can be set to "short" to get
abbreviated month names in all locales.

For non-localized date formats, the ``form`` attribute on
``cs:date`` is not set (the ``date-parts`` attribute is unavailable
as well). Instead, the date format is entirely controlled by
``cs:date`` and its (one or more) ``cs:date-part``
children. In contrast to localized dates, only the included
``cs:date-part`` elements will be rendered, in the order in which
they are specified. The ``cs:date-part`` elements may carry any of
the attributes for `affixes`_ and `formatting`_ attributes,
while ``cs:date`` may carry a `delimiter`_ (delimiting
the various ``cs:date-part`` elements).

For both localized and non-localized dates, `affixes`_
and `formatting`_ attributes may be specified for the
``cs:date`` element.

Date-part
^^^^^^^^^

The ``cs:date-part`` element is used to control how the different
date parts of the date variable specified in the parent ``cs:date``
element are rendered. The date parts are identified by the ``name``
attribute, with possible values:

``day``
    For ``day`` the ``form`` attribute may be set on ``cs:date-part``,
    with values:

    
    -  "numeric" - default, e.g. "1"
    -  "numeric-leading-zeros" - e.g. "01"
    -  "ordinal" - e.g. "1st"

``month``
    For ``month`` the `strip-periods`_ and
    ``form`` attributes may be set on ``cs:date-part``. The abbreviated
    ("short"-form) month names are
    `localized terms`_, which by default include
    periods. These periods can be stripped by setting the value of
    `strip-periods`_ to "true" ("false" is the
    default). The possible values of ``form``:

    
    -  "long" - default, e.g. "January"
    -  "short" - e.g. "Jan."
    -  "numeric" - e.g. "1"
    -  "numeric-leading-zeros" - e.g. "01"

``year``
    For ``year`` the ``form`` attribute may be set on ``cs:date-part``,
    with values:

    
    -  "long" - default, e.g. "2005"
    -  "short" - e.g. "05"


All ``cs:date-part`` elements may carry any of the
`formatting`_ attributes, the
`text-case`_ attribute, and, for non-localized dates,
also `affixes`_.

An example (which would yield dates like "(May 4, 2004)"):

.. sourcecode:: xml

    <date variable="accessed" prefix="(" suffix=")" delimiter=" ">
      <date-part name="month"/>
      <date-part name="day" suffix=","/>
      <date-part name="year"/>
    </date>

Number
~~~~~~

The ``cs:number`` element can be used to output any of the
following variables:


-  "edition"
-  "volume"
-  "issue"
-  "number"
-  "number-of-volumes"

Although these variables can also be rendered with ``cs:text``,
``cs:number`` has the benefit of offering number-specific
formatting via the ``form`` attribute, with values:


-  "numeric" (default) - e.g. "1", "2", "3"
-  "ordinal" - e.g. "1st", "2nd", "3rd"
-  "long-ordinal" - e.g. "first", "second", "third"
-  "roman" - "i", "ii", "iii"

When variables are displayed with ``cs:number``, only the numeric
content in used in the rendering (e.g. "12" when the entire string
is "12th edition"). Fields can be tested for non-numeric content
with the ``is-numeric`` (see `Conditionals`_), e.g. "12th edition"
would test false while "35" would test true.

(TODO: what happens if the field contents is "Volume 3, part 2".
Will only the "3" be extracted? What about "Volume 2.5"?)

The ``cs:number`` element may carry any of the attributes for `affixes`_
and `formatting`_, as well as the `text-case`_ attribute.

Names
~~~~~

The ``cs:names`` element can be used to display the contents of one
or more `name variables`_, each of which can
contain multiple contributors (e.g. the "author" variable will
contain all the cited item's authors). The variables to be
displayed are set with the ``variable`` attribute. If multiple
variables are listed (separated by single spaces, see example),
each variable is independently rendered in the order specified,
with one exception: if the value of ``variable`` consists of
"editor" and "translator" (in either order), and if the contents of
the two name variables is identical, then the contents of only one
name variables is rendered. In addition, the
"editor-translator"-term is used if the ``cs:names`` element
contains a ``cs:label`` element, replacing the default "editor" and
"translator"-terms (e.g., this might result in "J. Doe, et al.
(eds. & trans.)". Furthermore, the `delimiter`_
attribute may be set on ``cs:names`` to delimite the names of the
different name variables (e.g. the semicolon in "Doe & Stevens
(editors); Johnson et al. (translators)").

.. sourcecode:: xml

    <names variable="editor translator" delimiter="; ">
      <name and="symbol" initialize-with=". " delimiter=", "/>
      <label prefix=" (" text-case="capitalize-first" suffix=")"/>
    </names>

There are four child elements associated with the ``cs:names``
element: ``cs:name``, ``cs:et-al``, ``cs:substitute`` and
``cs:label`` (all discussed below). In addition, the ``cs:names``
element may carry any of the attributes for `affixes`_ and
`formatting`_.

Name
^^^^

The ``cs:name`` element is a required child element of
``cs:names``, and describes both how individual names are
formatted, and how names within a name variable are separated from
each other. The attributes (all of which are optional) that may be
used on ``cs:name`` are:

``and``
    This attribute may be used to specify a delimiter between the
    second last and the last name of the names in the name variable (if
    multiple name variable are specified in ``cs:names``, the delimiter
    is applied for each variable). The value of the attribute may be
    either "text", which selects the "and" term, or "symbol", which selects the
    ampersand.

``delimiter-precedes-last``
    Determines whether the delimiter is used to separate the second
    from last and the last contributor in name lists. The possible
    values are:

    
    -  "contextual" (default): the delimiter is only included for name
       lists of length three or more
       2 authors: "J. Doe and T. Williams,"
       3 authors: "J. Doe**,** S. Smith**,** and T. Williams" (note comma
       preceding 'and').
    -  "always": the delimiter is always included
       2 authors: "J. Doe**,** and T. Williams"
       3 authors: "J. Doe**,** S. Smith**,** and T. Williams" (note comma
       preceding 'and').
    -  "never": the delimiter is never included
       2 authors: "J. Doe and T. Williams,"
       3 authors: "J. Doe**,** S. Smith and T. Williams"

``delimiter``
    Can be used to set a text string to separate names of a name
    variable (e.g. ", " to yield "J. Doe, S. Smith.")


The remaining ``cs:name``-specific attributes, discussed below,
only affect structured names. Unstructured names, mainly used for
non-personal names, like those of organizations (e.g. "United
Nations"), consist of a single indivisible name. Structured names,
on the other hand, are used for personal names. In addition to the
required "family" name-part, these names may also contain "given",
"suffix", "non-dropping-particle" and "dropping-particle"
name-parts. The exact role of each of these name-parts is:


-  "family": the surname minus any particles and suffixes
-  "given": the given names, which may be either written out full
   ("John Edward") or as initials ("J. E.")
-  "suffix": used for name suffixes (e.g. "Jr." in "John Smith Jr."
   and "III" in "Bill Gates III")
-  "non-dropping-particle": name particles that are not dropped
   when only the last name is shown ("de Koning") but which may be
   treated as a separate object from the family name
-  "dropping-particle": name particles that are dropped when only
   the last name is shown ("van" in "Ludwig van Beethoven", which
   becomes "Beethoven")

``form``
    Specifies whether all the name-parts of structured names should be
    displayed (value "long"), or only the family name and the
    non-dropping-particle (value "short"). A third value, "count",
    returns the total number of names that would be otherwise displayed
    by the use of the ``cs:names`` element (taking into account the
    effects of et-al abbreviation), and may be used for advanced
    `sorting`_.

``name-as-sort-order``
    Specifies that the name should be displayed with the given name
    following the family name (e.g. "John Doe" becomes "Doe, John").
    The attribute may have one of the two values:

    
    -  "first": name-as-sort-order applies to the first name in each
       name variable
    -  "all": name-as-sort-order applies to all names

    Note that the sort order of names may differ from the display order
    for names containing particles and suffixes (TODO: link to relevant
    section). Also, this attribute only affects names written in the
    latin or Cyrillic alphabet. Names written in other alphabets (e.g.
    Asian scripts) are always shown with the family name preceding the
    given name, separated by a space.

``sort-separator``
    Sets the delimiter for personal name parts affected by
    ``name-as-sort-order``. E.g. the ", " in "Doe, John". As is the
    case for ``name-as-sort-order``, this attribute only affects names
    written in the latin or Cyrillic alphabet.

``initialize-with``
    If this attribute is set, given names are converted to initials.
    The attribute value specifies the suffix that is included after
    each initial (the ". " in "J. Doe"). (TODO: initialization routines
    should include support for hyphenated names as well ("Britt-Marie"
    becomes "B-M" or "BM" [this toggle might require a new option])).


The ``cs:name`` element may also carry any of the attributes for
`affixes`_ and `formatting`_.

Name-part order
'''''''''''''''

The order of names, when displayed or when used for sorting, is
dependent on many factors: the attributes ``form``,
``name-as-sort-order``, ``demote-particles`` on ``cs:name``, the
value of the global ``demote-particles``-option, and the alphabet
of the individual name. The different orders are:

**Display**

``form`` set to "long", latin/Cyrillic name


1) given
2) dropping-particle
3) non-dropping-particle
4) family
5) suffix

``form`` set to "long", non-latin/Cyrillic name


1) family
2) given (separated from family by a space)
3) suffix (separated from given by a space)

``form`` set to "short"


1) non-dropping-particles (for latin/Cyrillic names)
2) family

``form`` set to "long", name-as-sort-order active,
``demote-particles`` set to "never" or "sort-only", latin/Cyrillic
name


1) non-dropping-particle
2) family
3) suffix
4) given
5) dropping-particle

``form`` set to "long", name-as-sort-order active,
``demote-particles`` set to "display-and-sort", latin/Cyrillic
name


1) family
2) suffix
3) given
4) dropping-particle
5) non-dropping-particle

**Sorting**

N.B. Sort keys are given in descending order of importance.

``demote-particles`` set to "never"

1) non-dropping-particle + family
2) dropping-particle
3) given
4) suffix

``demote-particles`` set to "sort-only" or "display-and-sort"

1) family
2) dropping-particle + non-dropping-particle
3) given
4) suffix

Unstructured names are sorted as is after leading localized "stop"
words are stripped (TODO: how are these defined, exactly?). For
example, "The New York Times" would sort as "New York Times."

Name-part formatting
''''''''''''''''''''

The ``cs:name`` element may also include one or more
``cs:name-part`` child elements. These child elements accept any of
the `formatting`_ attributes as well as the
`text-case`_ attribute, which allows for separate
formatting of the different name parts (e.g. "Jane DOE"). The
name-part for which formatting instructions are specified is set
with the required ``name`` attribute on ``cs:name-part``, with
values "family" (family name) or "given" (given name). The order of
the ``cs:name-part`` elements has no effect on how names are
displayed.

An example:

.. sourcecode:: xml

    <names variable="author">
      <name form="short" and="symbol" delimiter=", " initialize-with=". ">
        <name-part name="family" text-case="uppercase">
      </name>
    </names>

Et-al
^^^^^

The ``cs:et-al`` element can be used to customize the "et al."-type
name list abbreviation (note that this abbreviation is controlled
via the et-al `options`_). First, the 'term' attribute
of the element can be set to either "et-al" (default) or "and
others" to use either term, so that
different et-al terms can be used in citations and the
bibliography. Secondly, any of the attributes for `affixes`_ and
`formatting`_ attributes can be applied to
``cs:et-al``, e.g. to italicize the "et-al" term.

An example:

.. sourcecode:: xml

    <names variable="author">
      <name/>
      <et-al term="and others" font-style="italic"/>
    </names>

Substitute
^^^^^^^^^^

The ``cs:substitute`` element can be used to specify one of more
substitutions in case the `name variables`_
specified in the parent ``cs:names`` element is/are empty. The
substitutions are specified as child elements of ``cs:substitute``,
and can consist of any of the standard
`rendering elements`_ (with the exception of
``cs:layout``), or of a short-hand version of ``cs:names`` without
any child elements (in the latter case formatting instructions are
inherited from the ``cs:name`` and ``cs:et-al`` elements in the
same ``cs:names`` element (TODO: verify that this is what's
supposed to happen)). The specified elements are tested in order
until an element returns a non-empty result.

An example (which substitutes the editor, translator or the title,
in that order):

.. sourcecode:: xml

    <macro name="author">
      <names variable="author">
        <name name-as-sort-order="all" 
              and="symbol" 
              sort-separator=", " 
              initialize-with=". "
              delimiter=", " 
              delimiter-precedes-last="always"/>
        <label form="short" prefix=" (" suffix=".)" text-transform="capitalize"/>
        <substitute>
          <names variable="editor"/>
          <names variable="translator"/>
          <text macro="title"/>
        </substitute>
      </names>
    </macro>

Label in ``cs:names``
^^^^^^^^^^^^^^^^^^^^^

The ``cs:label`` element, used to output text terms whose
pluralization depends on the contents of another variable (e.g.
"(editors)" in "Doe and Smith (editors)"), is discussed in detail
in the `label`_ section. When used within ``cs:names``,
the ``variable`` attribute should be omitted, as this is inherited
from the parent ``cs:names`` element.

Label
~~~~~

The ``cs:label`` element is used to output text terms whose
pluralization depends on the contents of another variable. An
example is the label for pages, which can be either singular ("page
5") or plural ("pages 5-7"). This output could be written in CSL
as:

.. sourcecode:: xml

    <group delimiter=" ">
      <label variable="page" form="long"/>
      <text variable="page"/>
    </group>

The ``variable`` attribute of ``cs:label`` must be set (possible
values are "page" and "locator"), unless ``cs:label`` is used
within ``cs:names``, in which case ``cs:label`` inherits the
variable(s) from the ``cs:names`` element. The value of the
``variable`` attribute both selects the accompanying text term (the
"page" and "locator" terms for the "page" and "locator" variables,
respectively), and uses the variable content to determine the
pluralization of the text term.

The ``cs:label`` element may carry any of the attributes for `affixes`_
and `formatting`_ attributes, as well as the
`text-case`_ attribute. In addition, the following
attributes are applicable for ``cs:label``:

``form`` (required)
    The form of the label-term, with values:

    
    -  "long": e.g. "editor"/"editors" for the term editor
    -  "verb": e.g. "edited by" for the term editor
    -  "short": e.g. "ed"/"eds" for the term editor
    -  "verb-short": e.g. "ed" for the term editor
    -  "symbol": e.g. "§" for the term section

``strip-periods`` (optional)
    If set to "true" (default is "false), periods are stripped from the
    term used by ``cs:label``

``plural`` (optional)
    Sets pluralization of the term, with values:

    
    -  "contextual": default, pluralization is dependent on the
       variable contents, e.g. "p. 1", "pp. 1-3"
    -  "always": - always use the plural form, e.g. "pp. 1", "pp. 1-3"
    -  "never": - always use the singular form, e.g. "p. 1", "p. 1-3"


(TODO: ``form`` seems required for ``cs:label``. Can't it just
default to "long"? That seems more consistent as ``form`` is
generally optional, e.g. for cs:name, cs:date-part, cs:text and
cs:number.)

Group
~~~~~

The ``cs:group`` element must contain one or more
`rendering elements`_ (not ``cs:layout``). It
has multiple uses: ``cs:group`` can carry a
`delimiter`_, which is used to separate the enclosed
elements. It can provide `affixes`_ for the entire group
of elements, and may carry `formatting`_ attributes
(any except for "text-case"), which are transmitted to the enclosed
elements. In addition, ``cs:group`` acts as an conditional: if none
of the enclosed elements reference a non-empty variable or macro,
'decorating' ``cs:text`` elements that output verbatim text or
terms (e.g. ``<text value="some text">`` and
``<text term="editor">``) are ignored.

(TODO: Are only text-terms ignored if they are the sole output, or
would be ignored as well?)

.. sourcecode:: xml

    <group delimiter=": " font-weight="bold">
      <text variable="publisher-place"/>
      <text variable="publisher"/>
    </group>

Style Behavior
--------------

Options
~~~~~~~

Styles can be extensively configured with options, which are set as attributes
(all of which are optional). `Citation-specific options`_ are set on
``cs:citation``, while `bibliography-specific options`_ are set on
``cs:bibliography``. `Global options`_, which affect both citations and the
bibliography, are set ``cs:style``. `Hierarchical name options`_ may be set on
``cs:style``, ``cs:citation`` and ``cs:bibliography``. Finally, `locale options`
may be set on ``cs:locale`` to override the default values specified in the
`locale files <#Locale Files - Basic Structure>`_.

Citation-specific Options
^^^^^^^^^^^^^^^^^^^^^^^^^

Et al. Abbrevation
''''''''''''''''''

``et-al-min``
    Specifies the minimum number of contributors (e.g. authors,
    editors, etc.) in a name list for activation of et-al
    abbreviation.

``et-al-use-first``
    The number of contributor names to display when et-al abbreviation
    is used. ``et-al-subsequent-min``

``et-al-subsequent-min``
    Similar to et-al-min, this allows subsequent references to use a
    different contributor limit for activation of et-al abbreviation.

``et-al-subsequent-use-first``
    Similar to et-al-use-first, this allows subsequent references to
    display a different number of contributors when et-al abbreviation
    is used.


Disambiguation
''''''''''''''

Disambiguation of short-form cites (TODO: when is a cite a
short-form cite?) can be achieved in four ways:


1. The number of names shown can be increased.
2. The names can be expanded.
3. A year-suffix can be included
4. The cite can be rendered with the ``disambiguate`` attribute of
   ``cs:condition`` testing "true"

These different approaches are activated with the attributes
described in this section, and are always performed in this order.

``disambiguate-add-names``
    If set to "true" ("false" is the default), names that would
    otherwise be hidden as a result of et-al abbreviation are added if
    this uniquely identifies the target source, incrementally relaxing
    the constraints imposed by ``et-al-subsequent-min`` and
    ``et-al-subsequent-use-first`` (if a source has been cited multiple
    times) or by ``et-al-min`` and ``et-al-use-first`` (if a source is
    cited only once, or if the et-al-subsequent attributes aren't set).
    The exact rendering of added names is determined by applying, in
    order: the ``form`` attribute ("long" or "short") on ``cs:name``;
    the ``initialize-with`` attribute on ``cs:name`` (if present); the
    value of ``givenname-disambiguation-rule``, if
    ``disambiguate-add-givenname`` is set to "true".

``disambiguate-add-givenname``
    If set to "true" ("false" is the default), names are expanded (e.g.
    changing "Doe, 2005; Doe 2005" to "John Doe, 2005; Mary Doe,
    2005"). The precise method of name expansion is specified by
    ``givenname-disambiguation-rule`` (if this attribute is not set,
    the default "all-names" value is used). Note that except for the
    "by-cite" value of ``givenname-disambiguation-rule``, name
    expansion will affect the way the name is rendered in all the
    references with that name in the document, even when the expansion
    is not required to uniquely identify the target resource. This is
    because the purpose of the given name disambiguation rules
    (excepting the "by-cite" rule) is global disambiguation of *names*,
    not cites.

``disambiguate-add-year-suffix``
    If set to "true" ("false" is the default), a suffix is added to the
    year when multiple works by the same author(s) published in the
    same year are included in one bibliography (e.g. "Doe 2007a,
    2007b").

``givenname-disambiguation-rule``
    This option can have the following values:

    
    -  "all-names"
       The default value. A given name is first formatted as specified by
       the attributes set on ``cs:name`` (``form``, ``initialize-with``).
       If the resulting name does not uniquely identify the full name of
       the individual, it is progressively transformed in the following
       progression, until disambiguation succeeds:
       
       1. "short" becomes "long" + ``initialize-with`` if the latter is
          defined (e.g. "Doe" becomes "J. Doe") (TODO: what does "if the
          latter is defined" mean?)
       2. "long" + ``initialize-with`` becomes "long" if the former is
          defined (e.g. "J. Doe" becomes "John Doe") (TODO: what does "if the
          former is defined" mean?)
       3. "short" becomes "long" (e.g. "Doe" becomes "John Doe") (TODO:
          don't get this step, how does this add anything to steps 1 and 2?)
          Note that if the name begins in "long" ``form`` with the given name
          as initials, step 1 in this list will be skipped. Likewise, if the
          name begins in "short" ``form`` and the ``initialize-with``
          attribute is not set, steps 1 and 2 will be skipped. If the name
          begins in "long" ``form``, this option will have no effect.

    -  "all-names-with-initials"
       Same as the "all-names" rule above, but omitting steps 2 and 3 of
       that rule.
    -  "primary-name"
       Same as the "all-names" rule above, but ambiguity is only checked
       for the first-listed name source, and only first-listed names are
       affected by the transformation.
    -  "primary-name-with-initials"
       Same as the "primary-name" rule above, but omitting steps 2 and 3
       of that rule.
    -  "by-cite"
       Applies the transformation described under the "all-names" rule
       above, but limits the transformation to the current source. The
       appearance of the name in other references will not be affected.


Collapsing
''''''''''

``collapse``
    The collapse option provides several ways for the collapsing of
    citations. The possible values are:

    
    -  "citation-number": collapses numeric citation ranges (e.g. from
       "[1, 2, 3]" to "[1-3]"). Note that only increasing ranges are
       collapsed, e.g. "[3, 2, 1]" will not collapse, so that it is often
       desirable to sort by the ``citation-number``
       variable (see `Sorting`_).
    -  "year": collapses subsequent cites with the same author(s), e.g.
       from "(Doe 2000, Doe 2001)" to "(Doe 2000, 2001)"
    -  "year-suffix": collapses as "year", but also collapses identical
       years, e.g. from "(Doe 2000a, Doe 2000b)" to "(Doe 2000a, b)". Note
       that the "year-suffix" option falls back to "year" if the
       ``disambiguate-add-year-suffix`` attribute is not set to "true".
    -  "year-suffix-ranged": collapses as "year-suffix", but also
       collapses ranges of year-suffix markers, giving "(Doe 2000a-c)"
       instead of "(Doe 2000a, b, c)". Note that the "year-suffix-ranged"
       option falls back to "year" if the ``disambiguate-add-year-suffix``
       attribute is not set to "true".

``year-suffix-delimiter``
    Specifies the delimiter between subsequent year-suffix elements.
    E.g., if the ``collapse`` option is set to "year-suffix", the
    ``delimiter`` on ``cs:layout`` in ``cs:citation`` is set to "; ",
    and if the value of ``year-suffix-delimiter`` is ",", cites to
    "Smith 1999a", "Smith 1999b", "Smith 2000" and "Jones 2001" would
    be collapsed to "(Smith 1999a,b; 2000; Jones 2001)". If this
    attribute is not set, the delimiter defaults to the one specified
    for the citation ``cs:layout`` element.

``after-collapse-delimiter``
    Specifies the delimiter that should *follow* a group of collapsed
    cites, when the next cite in the citation is not collapsed. For
    example, with the ``collapse`` attribute set to "year-suffix", the
    ``delimiter`` on ``cs:layout`` in ``cs:citation`` set to ", " and
    ``after-collapse-delimiter`` set to "; ", cites to "Smith 1999a",
    "Smith 1999b", "Smith 2000", "Jones 2001" and "Brown 2007" would
    collapse to: "(Smith 1999a, b, 2000; Jones 2001, Brown 2007)".


Positioning
'''''''''''

``near-note-distance``
    The "near-note" position (see `Conditionals`_) is true when the
    distance (measured in number of footnotes or endnotes) between the
    current cite and the most recent preceding cite to the same source
    is no more than the value of ``near-note-distance``. If this
    attribute is not set, a default value of "5" is used.

Bibliography-specific Options
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Et al. Abbrevation
''''''''''''''''''

``et-al-min``
    Specifies the minimum number of contributors (e.g. authors,
    editors, etc.) in a name list for activation of et-al
    abbreviation.

``et-al-use-first``
    The number of contributor names to display when et-al abbreviation
    is used.


White-spacing
'''''''''''''

(TODO: I would have called this section "Layout", if it wasn't for
the cs:layout element, which might cause confusion)

``hanging-indent``
    If set to "true" ("false" is the default), bibliographic entries
    are rendered with hanging-indents

``second-field-align``
    If set to "flush", subsequent lines of each bibliography entry are
    aligned with the beginning of the second field. If set to "margin",
    the first field is put in the margin and all subsequent lines of
    text are aligned with the margin (as in the IEEE style). An example
    showing the alignment, if the first field is
    ``<text   variable="citation-number" suffix=". "/>``:


.. sourcecode:: xml

    1. Adams, D. (2002). The Ultimate Hitchhiker's Guide to the
       Galaxy (1st ed.).

``line-spacing``
    Sets the spacing of lines (in units of lines, default is "1")

``entry-spacing``
    Sets the spacing of lines (in units of line-spacing, default is
    "1")


Reference Grouping
''''''''''''''''''

``subsequent-author-substitute``
    Substitutes subsequent recurrences of an author with the attribute
    value (which can be any string), e.g.:

.. sourcecode:: xml

    Asimov. Foundation, 1951.
    ---. Foundation and Empire, 1952.
    ---. Second Foundation, 1953.

Global Options
^^^^^^^^^^^^^^

Compound name initialization
''''''''''''''''''''''''''''

``initialize-with-hyphen``
    Specifies whether compound given names (e.g. "Jean-Luc") should be
    initialized with a hyphen ("J.-L.", value "true") or without ("J.L.", value
    "false"). Defaults to "true".

Page Ranges
'''''''''''

``page-range-format``
    The value of this attribute determines how page ranges are
    formatted. Available values: "expanded" (e.g. "321-328"), "minimal"
    ("321-8"), and "chicago" ("321-28"). See also
    `Appendix IV - Page Abbreviation Rules`_. If the attribute is
    not specified, the content of the page-field is left unchanged.

Name Particles
''''''''''''''

Many Western names consist not only of a given and a family name,
but also of one or more name particles. However, not all particles
are equal: name particles can be either maintained or dropped when
only the surname is shown (from now on we will refer to these two
types as non-dropping-particle and dropping-particle,
respectively). A single name can contain particles of both types
(with the non-dropping-particle always following the
dropping-particle). For example, the French name "G�rard de la
Martini�re" can be deconstructed into:

.. sourcecode:: xml

    {
        "author": {
            "family": "Martini�re",
            "given": "G�rard",
            "dropping-particle": "de",
            "non-dropping-particle": "la" 
        } 
    }

When just the surname is shown, only the non-dropping-particle is
kept: "La Martini�re".

Whereas the dropping-particle are always treated the same, there is
some variation between styles in how the non-dropping-particle is
handled in case of inverted names, where the family name precedes
the given name. First, the non-dropping-particle can be either
prepended to the family name (e.g. "de Koning, W.") or appended
(after initials or given names, e.g. "Koning, W. de"). Note that
the dropping-particle is always appended in inverted names.
Secondly, if the choice has been made to prepend the
non-dropping-particle to the family name for inverted names, the
author sort order can differ. Either the non-dropping-particle
remains part of the family name (as part of the primary sort key;
example A), or it may be separated from the family name and become
(part of) a secondary sort key, joining the dropping-particle, if
available (example B).

**Sort order A: non-dropping-particle not demoted**


-  primary sort key: "la Martini�re"
-  secondary sort key: "de"
-  tertiary sort key: "G�rard"

**Sort order B: non-dropping-particle demoted**


-  primary sort key: "Martini�re"
-  secondary sort key: "de la"
-  tertiary sort key: "G�rard"

For some names the particles should not follow the general
non-dropping-particle handling. This can however be easily
circumvented by, for these cases, including the particles in the
family name field, for example for the French general Charles de
Gaulle:

.. sourcecode:: xml

    {
        "author": {
            "family": "de Gaulle",
            "given": "Charles",
        } 
    }

The option of how particles should be handled for inverted names is
set with the ``demote-non-dropping-particle`` option:

``demote-non-dropping-particle``
    Sets the display and sorting behavior of non-dropped particles in
    inverted names (e.g. "Koning, W. de"). The possible values are:

    
    -  "never": the non-dropping-particle is treated as part of the
       family name, whereas the dropping-particle is appended (e.g. "de
       Koning, W.", "la Martini�re, G�rard de"). The non-dropping-particle
       is part of the primary sort key (example A, e.g. "de Koning, W."
       appears under "D").
    -  "sort-only": as "never", with the exception that
       non-dropping-particle is demoted to a secondary sort key (see
       example B, e.g. "de Koning, W." appears under "K").
    -  "display-and-sort" (default): the dropping and
       non-dropping-particle are appended to the rest of the name (e.g.
       "Koning, W. de" and "Martini�re, G�rard de la"). When names are
       sorted, all particles are part of the secondary sort key (see
       example B, e.g. "Koning, W. de" appears under "K").

Hierarchical Name Options
^^^^^^^^^^^^^^^^^^^^^^^^^

Attributes for the ``cs:names`` and ``cs:name`` elements may also be set on
``cs:style``, ``cs:citation`` and ``cs:bibliography``. This eliminates the need
to repeat the same attributes and attribute values for every occurance of the
``cs:names`` and ``cs:name`` elements.

The available hierarchical attributes for ``cs:name`` are ``and``,
``delimiter-precedes-last``, ``et-al-min``, ``et-al-use-first``,
``et-al-subsequent-min``, ``et-al-subsequent-use-first``, ``initialize-with``,
``name-as-sort-order`` and ``sort-separator`` attributes. The attributes
``name-form`` and ``name-delimiter`` accompany the ``form`` and ``delimiter``
attributes on ``cs:name``. Similarly, ``names-delimiter``, the only hierarchical
attribute available for ``cs:names``, accompanies the ``delimiter`` attribute on
``cs:names``.

When a hierarchical name attribute is set on ``cs:style``, ``cs:citation`` or
``cs:bibliography``, its value is used for all ``cs:names`` elements within the
element carrying the attribute. When an element lower in the hierarchy includes
the same attribute with a different value, this latter value will override the
value(s) specified higher in the hierarchy.

Locale Options
^^^^^^^^^^^^^^

``punctuation-in-quote``
    Determines whether punctuation (commas and periods) is placed
    within (value "true") or outside (default, value "false") quotation
    marks added with the ``quotes`` attribute.

Sorting
~~~~~~~

The sort order for citations and the bibliography can be set with
the ``cs:sort`` element in ``cs:citation`` and ``cs:bibliography``.
If a style does not include sorting instructions, references are
listed in the order cited.

The ``cs:sort`` which must contain one or more ``cs:key`` child
elements. The sort key, set as an attribute on ``cs:key``, can be a
``variable`` (with possible values of any of the
`name variables`_, `date variables`_ or
`source variables`_ or a ``macro``. The
``cs:key`` element may carry the ``sort`` attribute, with possible
values of "ascending" (default) or "descending", to indicate the
sort order. The ``names-min`` and ``names-use-first`` attributes
(which affect all names generated by macros called by ``cs:key``)
can be used to (further) constrain the number of names used in the
sort, overriding the values of the corresponding ``et-al-min`` and
``et-al-use-first`` options.

An example, where citations are first sorted by the output of the
author macro with overriding values of ``et-al-min`` and
``et-al-use-first``. Entries that share the same author macro
output are further sorted in reverse order by date of issue.

.. sourcecode:: xml

    <citation>
      <sort>
        <key macro="author" names-min="3" names-use-first="3"/>
        <key variable="issued" sort="descending"/>
      </sort>
    </citation>

The values returned for variables and macros called in ``cs:sort``
may differ from the "ordinary" rendered values. These differences
are detailed below:

Sorting Variables
^^^^^^^^^^^^^^^^^

When ordinary variables are referenced in ``cs:key`` via the
``variable`` attribute, the string value is returned, without
formatting decorations. Name, date and numeric variables are
returned in a default format, as follows:

**names:** `Name variables`_ can be set directly
on ``cs:key`` using the ``variable`` attribute (e.g.
``<key variable="author"/>``). In this case, the name-list from the
variable will be returned as a string in the "long" ``form`` of
``cs:name``, formatted with ``name-as-sort-order`` set to "all".
However, using the ``variable`` attribute for calling name
variables is often undesirable; it is usually more robust to use a
``macro`` call to the same macro used to render contributor names
in the context (``cs:citation`` or ``cs:bibliography``) to which
the sort applies. One of the benefits of using macros is that
substitution logic becomes available (e.g. in the ``editor``
variable might substitutes for an empty ``author`` variable).

**dates:** `Date variables`_ are returned to
``cs:key`` in the format YYYY-MM-DD, with zeros substituted for
missing elements. If a style should sort by the complete date, it
is often more reliable to set sort keys for dates with the
``variable`` attribute, rather than calling a macro. Macros should
however be used if the sort key should consist of incomplete dates
(e.g. only the year).

**numbers:** Variables that carry numeric values are returned as
integer values. As a form transformation (i.e. to roman,
year-suffix or ordinal) is usually undesired for sorting, numeric
variables should ordinarily be referenced via the ``variable``
attribute, rather than via ``macro``.

Sorting Macros
^^^^^^^^^^^^^^

When a macro is called via ``cs:key``, it returns whatever string
value the macro would ordinarily generate, but stripped of any
formatting decorations. As indicated above, it is generally
preferable to use ``macro`` to sort by name. There are two special
considerations for name variables: first, keys for sorting a list
of names may be obtained from any macro that generates names of
form "short" or "long". The only exception to ordinary rendering is
that "et al." is not appended to names used in sort keys. Secondly,
it is possible to sort by the number of names in a names-list (i.e.
the number of authors of a source), by calling a macro in which the
``form`` attribute of ``cs:name`` is set to "count". In this case a
count value of "3" would be obtained for a name variable that would
otherwise return "Jones, Smith, Doe".

Conditionals
~~~~~~~~~~~~

The ``cs:choose`` element allows for the expression of conditional
statements. The element should always contain a single ``cs:if``
child element. In addition, any number of ``cs:else-if`` child
elements may be included, as well as a closing ``cs:else`` element.
The contents of the ``cs:if`` and ``cs:else-if`` elements may
consist of any number of
`rendering elements`_ (with the exception of
``cs:layout``). For ``cs:else``, at least one rendering element
must be specified. An example of a conditional:

.. sourcecode:: xml

    <choose>
      <if type="book thesis" match="any">
        <text variable="title" font-style="italic">
      </if>
      <else-if type="chapter">
        <text variable="title" quotes="true">
      </else-if>
      <else>
        <text variable="title">
      </else>
    </choose>

Every ``cs:if`` and ``cs:else-if`` element must contain a
condition. The different types of conditions, expressed as
attributes, are:

``type``
    Tests true if the item is of the given
    type (`Appendix II - Types`_).

``variable``
    Tests true if the variable (`Appendix I - Variables`_) has a
    non-empty value.

``is-numeric``
    Tests true if the variable (`Appendix I - Variables`_) contains
    numeric data.

``locator``
    Tests true if the locator type of the item (``page``, ``chapter``,
    ``verse``, etc.) is equal to the condition value.

``position``
    Tests true if the relative position of the item cite in a document
    is equal to the condition value. The different positions are:

    
    -  "first": the position of a cite that is the first to reference
       an item
    -  "ibid": the position of a cite directly following another cite
       referencing the same item
    -  "ibid-with-locator": as ibid. As an additional requirement, the
       cite has to display the locator variable.
    -  "subsequent": the position of a cite that references an earlier
       referenced item.
    -  "near-note": the position of a cite that is not too far away (as
       measured in number of foot or endnotes) from a previous cite (TODO:
       does the previous cite has to be a full cite?) to the same item.
       The maximal distance is set with the
       ``near-note-distance``-option (see `positioning`_). Cites that are not
       located in a foot or endnote will never be in the "near-note"
       position.


Note that each cite can have multiple position values. Whenever
position="ibid-with-locator" is true, position="ibid" is also true.
And whenever position="ibid" or position="near-note" is true,
position="subsequent" is also true.

``disambiguate``
    Can be tested against "true" or "false". If disambiguate is tested
    against "true", the rendering elements inside the conditional will
    be displayed if they will differentiate two otherwise identical
    citations. If the citations remain identical after its addition, it
    will not be added. Note that disambiguation via the
    ``disambiguate`` conditional has the lowest priority of the
    different `disambiguation`_ options. (TODO:
    should we make a note here that ``disambiguate`` should only be
    used within ``cs:citation``? What is the expected behavior when
    this attribute is test against "false"? Would the content only be
    included when it does *not* disambiguate ambiguous cites?)

With the exception of ``disambiguate``, all the conditions may
specify more than one test value (variables, types, etc.),
separated with spaces (e.g. "book chapter"). In such cases the
``match`` attribute can be used as a logical operator. The
attribute can have the following values:


-  "all" (default): the condition only tests true if all test
   values test true (TODO: the schema should indicate the default
   value. I gathered this should be "all", see Andrea Rossato's mail
   from April 18th)
-  "any": the condition only tests true if any of test values tests
   true
-  "none": the condition only tests true if none of test values
   test true

Formatting
~~~~~~~~~~

The following formatting attributes may be set on ``cs:date``,
``cs:date-part``, ``cs:names``, ``cs:name``, ``cs:name-part``,
``cs:et-al``, ``cs:text``, ``cs:number``, ``cs:label``,
``cs:group`` and ``cs:layout``:

``font-style``
    Sets the font style, with values:

    
    -  "normal" (default)
    -  "italic"
    -  "oblique" (i.e. slanted)

``font-variant``
    Allows for the use of small capitals, with values:

    
    -  "normal" (default)
    -  "small-caps"

``font-weight``
    Sets the font weight, with values:

    
    -  "normal" (default)
    -  "bold"
    -  "light"

``text-decoration``
    Allows for the use of underlining, with values:

    
    -  "none" (default)
    -  "underline"

``vertical-align``
    Sets the vertical alignment, with values:

    
    -  "baseline" (default)
    -  "sup" (superscript)
    -  "sup" (subscript)

``quotes``
    When set "true" ("false" is default), the rendered text is wrapped
    in quotes. The quote-symbols are defined as terms in the
    "locales-xx-XX.xml" files, and thus are localized. Whether
    punctuation appears inside or outside the quotes depends on the
    setting of the global ``punctuation-in-quote`` option
    (see `Locale Options`_)

``display``
    By default, the text of each individual cite is formatted as a
    single continuous run of text. The ``display`` attribute allows for
    special positioning of portions of the cite text, which can be
    desirable for notes and bibliography entries. The attribute can
    carry the following values:

    
    -  "block": Places the content in a block stretching from margin to
       margin.
    -  "left-margin": Places the content in a block of fixed width
       starting at the left margin. All "left-margin" blocks in a
       bibliography share the same width, set according to the maximum
       number of characters appearing in any one such block.
    -  "right-inline": Places the content in a block directly to the
       right of any immediately preceding "left-margin" block, and
       extending to the right margin.
    -  "indent": Block-indents the content to the right by a standard
       amount.


Affixes
~~~~~~~

The affixes attributes ``prefix`` and ``suffix`` may be set on
``cs:date-part``, ``cs:names``, ``cs:name``, ``cs:et-al``,
``cs:date`` (except when ``cs:date`` is used within ``cs:locale``),
``cs:text``, ``cs:number``, ``cs:label``, ``cs:group`` and
``cs:layout``. The string value will be included either before
(``prefix``) or after (``suffix``) the displayed text. Affixes are
generally insensitive to the formatting attributes acting on the
calling element: the only exception to this rule are affixes set on
``cs:layout``. In cases where formatting of affixes is desired,
separate ``cs:text`` elements can be used instead, with a ``value``
attribute to output verbatim text.

Delimiter
~~~~~~~~~

The ``delimiter`` attribute can be used to specify a delimiting
string for ``cs:date`` (delimiting the ``cs:date-part`` elements),
``cs:names`` (delimiting multiple
`name variables`_), ``cs:name`` (delimiting names
in name lists), and ``cs:group`` & ``cs:layout`` (both delimiting
the direct child elements).

Text-case
~~~~~~~~~

The ``text-case`` attribute may be set on ``cs:text``,
``cs:number``, ``cs:label``, ``cs:name-part`` and ``cs:date-part``,
and can be used to control the text case of the rendered text. The
possible values are:


-  "lowercase": displays all text in lowercase
-  "uppercase": displays all text in uppercase
-  "capitalize-first": capitalizes the first character; the case of
   other characters is not affected
-  "capitalize-all": capitalizes the first character of every word;
   other characters are displayed lowercase
-  "title": displays text in title case (the
   *Chicago Manual of Style* calls this "headline style")
-  "sentence": displays text in sentence case ("sentence style")

Strip-periods
~~~~~~~~~~~~~

The ``strip-periods`` attribute may be set on ``cs:date-part`` (but
only is ``name`` is set to "month"), ``cs:text`` and ``cs:label``.
When set to "true" ("false" is the default), any periods in the
rendered text are removed.

Appendices
----------

Appendix I - Variables
~~~~~~~~~~~~~~~~~~~~~~

Source Variables
^^^^^^^^^^^^^^^^

Source variables contain the properties of the cited items, and
have no relation to the text in which the items are cited.


-  title
-  container-title
-  collection-title
-  original-title
-  publisher
-  publisher-place
-  event
-  event-place
-  page
-  locator
-  version
-  volume
-  number-of-volumes
-  issue
-  medium
-  status
-  edition
-  genre
-  note
-  annote
-  abstract
-  keyword
-  number
-  archive
-  archive\_location
-  archive-place
-  URL
-  DOI
-  ISBN

Date variables
''''''''''''''


-  issued
-  event
-  accessed
-  container
-  original-date

Name variables
''''''''''''''


-  author
-  editor
-  translator
-  recipient
-  interviewer
-  publisher
-  composer
-  original-publisher
-  original-author
-  container-author (to be used when citing a section of a book,
   for example, to distinguish the author proper from the author of
   the containing work)
-  collection-editor (use for series editor)

Citation Variables
^^^^^^^^^^^^^^^^^^

Citation variables are assigned by the CSL processor. Their value
can be dependent on the position of the cited items (for
citation-number), or on the disambiguation logic and formatting of
the selected CSL style (for citation-label) (TODO: not sure this is
true).


-  citation-number
-  citation-label (TODO: this variable might not belong here, as
   citeproc-js doesn't yet generate label-values. Also, it is still
   undocumented that a citation-label can be supplied in the input
   data)

Appendix II - Types
~~~~~~~~~~~~~~~~~~~

These are the different item types available within CSL:


-  article
-  article-magazine
-  article-newspaper
-  article-journal
-  bill
-  book
-  broadcast
-  chapter
-  entry
-  entry-dictionary
-  entry-encyclopedia
-  figure
-  graphic
-  interview
-  legislation
-  legal\_case
-  manuscript
-  map
-  motion\_picture
-  musical\_score
-  pamphlet
-  paper-conference
-  patent
-  post
-  post-weblog
-  personal\_communication
-  report
-  review
-  review-book
-  song
-  speech
-  thesis
-  treaty
-  webpage

Appendix III - Terms
~~~~~~~~~~~~~~~~~~~~

These are the different terms available within CSL:


-  Miscellaneous Terms
   
   -  accessed
   -  anonymous
   -  and
   -  and others
   -  at
   -  et-al
   -  forthcoming
   -  from
   -  in press
   -  ibid
   -  in
   -  no date
   -  references
   -  retrieved
   -  letter
   -  interview
   -  online
   -  cited
   -  edition
   -  internet
   -  presented at

-  Roles
   
   -  editor
   -  translator
   -  interviewer
   -  recipient

-  Months
   
   -  month-01
   -  month-02
   -  month-03
   -  month-04
   -  month-05
   -  month-06
   -  month-07
   -  month-08
   -  month-09
   -  month-10
   -  month-11
   -  month-12

-  Other
   
   -  cs-terms.locator (locators)
   -  book
   -  chapter
   -  column
   -  figure
   -  folio
   -  issue
   -  line
   -  note
   -  opus
   -  page
   -  page-range (a synonym for "page", to be deprecated)
   -  page-first
   -  paragraph
   -  part
   -  section
   -  sub verbo
   -  volume
   -  verse
   -  cs-terms.extension
   -  info-fields


Appendix IV - Page Abbreviation Rules
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The exact page abbreviation rules behind the different values of
the ``page-range-format`` attribute on ``cs:style`` are:

"minimum"
    All digits repeated in the second number are left out: 42-5, 321-8,
    2787-816

"expanded"
    Abbreviated page ranges are expanded to their non-abbreviated form:
    42-45, 321-328, 2787-2816

"chicago"
    Page ranges are abbreviated according to the
    `Chicago Manual of Style-rules <http://www.aahn.org/guidelines.html>`_:

Table: **Chicago Manual of Style page range abbreviation rules**

+------------------------+--------------------------+----------------+
| First number           | Second number            | Examples       |
+========================+==========================+================+
| Less than 100          | Use all digits           | 3-10; 71-72    |
+------------------------+--------------------------+----------------+
| 100 or multiple of 100 | Use all digits           | 100-104;       |
|                        |                          | 600-613;       |
|                        |                          | 1100-1123      |
+------------------------+--------------------------+----------------+
| 101 through 109 (in    | Use changed part only,   | 107-8; 505-17; |
| multiples of 100)      | omitting unneeded zeros  | 1002-6         |
+------------------------+--------------------------+----------------+
| 110 through 199 (in    | Use two digits, or more  | 321-25;        |
| multiples of 100)      | as needed.               | 415-532;       |
|                        |                          | 11564-68;      |
|                        |                          | 13792-803      |
+------------------------+--------------------------+----------------+
| 4 digits               | If numbers are four      | 1496-1504;     |
|                        | digits long and three    | 2787-2816      |
|                        | digits change, use all   |                |
|                        | digits                   |                |
+------------------------+--------------------------+----------------+
